(window.webpackJsonp=window.webpackJsonp||[]).push([[1165],{1568:function(t,s,a){"use strict";a.r(s);var e=a(58),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"计算机网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络"}},[t._v("#")]),t._v(" 计算机网络")]),t._v(" "),a("h2",{attrs:{id:"_1-重点-常见状态码知道哪些-304-403-405分别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-重点-常见状态码知道哪些-304-403-405分别是什么"}},[t._v("#")]),t._v(" 1. (重点)常见状态码知道哪些？ 304 403 405分别是什么")]),t._v(" "),a("p",[t._v("HTTP 响应状态代码指示特定 HTTP 请求是否已成功完成。")]),t._v(" "),a("p",[t._v("响应分为五类：")]),t._v(" "),a("ul",[a("li",[t._v("信息响应("),a("code",[t._v("100–199")]),t._v(")，")]),t._v(" "),a("li",[t._v("成功响应("),a("code",[t._v("200–299")]),t._v(")，")]),t._v(" "),a("li",[t._v("重定向("),a("code",[t._v("300–399")]),t._v(")，")]),t._v(" "),a("li",[t._v("客户端错误("),a("code",[t._v("400–499")]),t._v(")，请求服务端根本不存在的资源")]),t._v(" "),a("li",[t._v("服务器错误 ("),a("code",[t._v("500–599")]),t._v(")，服务端运行出错")])]),t._v(" "),a("h3",{attrs:{id:"信息响应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信息响应"}},[t._v("#")]),t._v(" 信息响应")]),t._v(" "),a("p",[t._v("100 Continue")]),t._v(" "),a("blockquote",[a("p",[t._v("这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它。")])]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("101")]),t._v(" 表示"),a("strong",[t._v("服务器")]),t._v("应"),a("strong",[t._v("客户端")]),t._v(" "),a("strong",[t._v("升级协议")]),t._v("的请求对协议进行切换。")],1),t._v(" "),a("p",[t._v("此机制始终由"),a("strong",[t._v("客户端")]),t._v("发起，并且服务器可能接受或拒绝切换到新协议。客户端可使用常用的协议（如HTTP / 1.1）发起请求，请求说明需要切换到"),a("strong",[t._v("HTTP / 2")]),t._v("或甚至到"),a("strong",[t._v("WebSocket。")])]),t._v(" "),a("h3",{attrs:{id:"成功响应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#成功响应"}},[t._v("#")]),t._v(" 成功响应")]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("200 OK")])],1),t._v(" "),a("p",[t._v("请求成功。成功的含义取决于HTTP方法：")]),t._v(" "),a("ul",[a("li",[t._v("GET：资源已被提取并在消息正文中传输。")]),t._v(" "),a("li",[t._v("HEAD：实体标头位于消息正文中。")]),t._v(" "),a("li",[t._v("POST：描述动作结果的资源在消息体中传输。")]),t._v(" "),a("li",[t._v("TRACE：消息正文包含服务器收到的请求消息")])]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("204 No Content")])],1),t._v(" "),a("ul",[a("li",[t._v("服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。")])]),t._v(" "),a("p",[t._v("206 Partial Content")]),t._v(" "),a("ul",[a("li",[t._v("服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP  下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含 Range  头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。")])]),t._v(" "),a("h3",{attrs:{id:"重定向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重定向"}},[t._v("#")]),t._v(" 重定向")]),t._v(" "),a("p",[t._v("300 Multiple Choice")]),t._v(" "),a("ul",[a("li",[t._v("被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。")])]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("301 Moved Permanently")]),t._v("永久重定向，访问过一次后以后浏览器就会直接去找新地址，依据响应头的loaction")],1),t._v(" "),a("ul",[a("li",[t._v("被请求的资源已"),a("strong",[t._v("永久移动到新位置")]),t._v("，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。")])]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("302 Found")]),t._v("临时重定向，下次访问还是访问原来的老地址，依据响应头的loaction")],1),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"red",size:"3"}},[t._v("请求的资源现在临时从不同的 URI 响应请求")]),t._v("。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。")],1)]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("304 Not Modified")]),t._v("一般是协商缓存发现缓存没过期返回的")],1),t._v(" "),a("ul",[a("li",[t._v("如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而"),a("font",{attrs:{color:"red",size:"3"}},[t._v("文档的内容（自上次访问以来或者根据请求的条件）并没有改变")]),t._v("，则服务器应当返回这个状态码。304 响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。")],1)]),t._v(" "),a("p",[t._v("307 Temporary Redirect")]),t._v(" "),a("ul",[a("li",[t._v("请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。")])]),t._v(" "),a("h3",{attrs:{id:"客户端响应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端响应"}},[t._v("#")]),t._v(" 客户端响应")]),t._v(" "),a("p",[t._v("400 Bad Request")]),t._v(" "),a("ul",[a("li",[t._v("1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。")]),t._v(" "),a("li",[t._v("2、请求参数有误。")])]),t._v(" "),a("p",[t._v("401 Unauthorized")]),t._v(" "),a("ul",[a("li",[t._v("当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate  信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了  Authorization  证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。")])]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("403 Forbidden")])],1),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"red",size:"3"}},[t._v("服务器已经理解请求，但是拒绝执行它，可以理解为用户没有权限")]),t._v("，。与 401 响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个 404  响应，假如它不希望让客户端获得任何信息。")],1)]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("404 Not Found")])],1),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"red",size:"3"}},[t._v("请求失败，请求所希望得到的资源未被在服务器上发现")]),t._v("。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。")],1)]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("405 Method Not Allowed")])],1),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"red",size:"3"}},[t._v("请求行中指定的请求方法不能被用于请求相应的资源")]),t._v("。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。 鉴于  PUT，DELETE  方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。")],1)]),t._v(" "),a("h3",{attrs:{id:"服务端响应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务端响应"}},[t._v("#")]),t._v(" 服务端响应")]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("500 Internal Server Error")]),t._v("服务器错误")],1),t._v(" "),a("ul",[a("li",[t._v("服务器遇到了不知道如何处理的情况。（就服务端的代码可能报错了）")])]),t._v(" "),a("p",[t._v("503 Service Unavailable")]),t._v(" "),a("ul",[a("li",[t._v("服务器没有准备好处理请求。 常见原因是服务器因维护或重载而停机。 请注意，与此响应一起，应发送解释问题的用户友好页面。 这个响应应该用于临时条件和 "),a("code",[t._v("Retry-After")]),t._v("：如果可能的话，HTTP头应该包含恢复服务之前的估计时间。 网站管理员还必须注意与此响应一起发送的与缓存相关的标头，因为这些临时条件响应通常不应被缓存。")])]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("504 Gateway Timeout")]),t._v(" 网关超时")],1),t._v(" "),a("ul",[a("li",[t._v("当服务器作为网关，不能及时得到响应时返回此错误代码。")])]),t._v(" "),a("h2",{attrs:{id:"_2-响应状态码-200-from-disk-cache-200-from-memory-cache-304的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-响应状态码-200-from-disk-cache-200-from-memory-cache-304的区别"}},[t._v("#")]),t._v(" 2. 响应状态码，200(from disk cache)，200（from memory cache），304的区别")]),t._v(" "),a("p",[t._v("这个属于HTTP缓存相关内容了，HTTP缓存，也可以叫浏览器缓存")]),t._v(" "),a("blockquote",[a("p",[t._v("浏览器缓存有两种：200 OK (from memory/disk cache)  和   304 Not Modified")])]),t._v(" "),a("p",[t._v("1、200 OK (from memory/disk cache)")]),t._v(" "),a("ul",[a("li",[t._v("这种缓存方式已经很普遍，大部分网站的静态文件都采用了，200 OK (from memory cache)或者200 OK (from  disk  cache)都是"),a("font",{attrs:{color:"red",size:"3"}},[t._v("直接读取客户端的缓存，无需再请求服务器")]),t._v("。一般是在Apache或者Nginx里设置，比如Nginx配置里会有类似这样的配置：")],1)]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)${expires 30d;}location ~ .*\\.(js|css)?${expires 12h;}\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这样就可以给静态文件缓存了，在有效期内，浏览器会直接读取客户端的缓存，而不用再请求服务器，除非用户清除了缓存或者使用Ctrl+F5强制刷新了页面。")]),t._v(" "),a("p",[t._v("2、304 Not Modified（不会从服务器端获取数据，而是直接使用直接第一次200 ok时获取的缓存数据）")]),t._v(" "),a("ul",[a("li",[a("font",{attrs:{color:"red",size:"3"}},[t._v("304缓存和上面最大的区别是浏览器需要向服务器询问一次，如果服务器端认为没有内容更新，直接返回304状态码")]),t._v("，无需返回body内容，浏览器就会直接取缓存内容输出，这样省掉了没必要的数据传输，也就提升了访问速度。")],1)]),t._v(" "),a("blockquote",[a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("两个的区别是 200 OK (from disk cache) 是浏览器没有与服务器进行确认， 直接用浏览器缓存。304 是浏览器和服务器确认了一次缓存有效性，再启用缓存")])],1)]),t._v(" "),a("blockquote",[a("p",[t._v("禁止200 OK (from disk cache) 这个缓存的方法是，ajax 请求是带上参数 cache: false")])]),t._v(" "),a("h2",{attrs:{id:"_3-重点-http-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-重点-http-methods"}},[t._v("#")]),t._v(" 3 (重点)http methods")]),t._v(" "),a("h3",{attrs:{id:"传统method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传统method"}},[t._v("#")]),t._v(" 传统method")]),t._v(" "),a("p",[t._v("get 获取服务器数据")]),t._v(" "),a("p",[t._v("post 向服务器提交数据")]),t._v(" "),a("h3",{attrs:{id:"现在的method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#现在的method"}},[t._v("#")]),t._v(" 现在的method")]),t._v(" "),a("p",[t._v("get 获取数据")]),t._v(" "),a("p",[t._v("post 新建数据")]),t._v(" "),a("p",[t._v("patch/put 更新数据")]),t._v(" "),a("p",[t._v("delete 删除数据")]),t._v(" "),a("h3",{attrs:{id:"restful-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restful-api"}},[t._v("#")]),t._v(" Restful API")]),t._v(" "),a("p",[t._v("传统api设计，把每个url当作一个功能")]),t._v(" "),a("p",[t._v("restful api设计，把每个url当作一个资源，方法如下：")]),t._v(" "),a("ul",[a("li",[t._v("尽量不用url参数")]),t._v(" "),a("li",[t._v("用method表示操作类型")])]),t._v(" "),a("h4",{attrs:{id:"不使用url参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不使用url参数"}},[t._v("#")]),t._v(" 不使用url参数")]),t._v(" "),a("p",[t._v("传统api设计：/api/list?pageIndex=2")]),t._v(" "),a("p",[t._v("RestfulAPI 设计：/api/list/2")]),t._v(" "),a("h4",{attrs:{id:"用method表示操作类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用method表示操作类型"}},[t._v("#")]),t._v(" 用method表示操作类型")]),t._v(" "),a("p",[t._v("传统api设计")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230219104059832.png",alt:"image-20230219104059832"}}),t._v(" "),a("p",[t._v("restful api设计")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230219103937513.png",alt:"image-20230219103937513"}}),t._v(" "),a("h2",{attrs:{id:"_3-1-post和get-的区别-除了长度-安全其他的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-post和get-的区别-除了长度-安全其他的"}},[t._v("#")]),t._v(" 3.1 POST和GET 的区别，除了长度，安全其他的")]),t._v(" "),a("h3",{attrs:{id:"解答"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解答"}},[t._v("#")]),t._v(" 解答")]),t._v(" "),a("p",[t._v("从标准上来看，GET 和 POST 的区别如下：")]),t._v(" "),a("ul",[a("li",[t._v("GET 用于"),a("font",{attrs:{color:"orange",size:"3"}},[t._v("获取信息")]),t._v("，是无副作用的，是幂等的，且"),a("font",{attrs:{color:"orange",size:"3"}},[t._v("可缓存")])],1),t._v(" "),a("li",[t._v("POST 用于"),a("font",{attrs:{color:"orange",size:"3"}},[t._v("修改服务器上的数据")]),t._v("，有副作用，非幂等，"),a("font",{attrs:{color:"orange",size:"3"}},[t._v("不可缓存")])],1)]),t._v(" "),a("p",[t._v("GET 和 POST 报文上的区别")]),t._v(" "),a("blockquote",[a("p",[t._v("GET 和 POST 方法没有实质区别，只是"),a("font",{attrs:{color:"orange",size:"3"}},[t._v("报文格式不同")]),t._v("。")],1)]),t._v(" "),a("p",[t._v("GET 和 POST 只是 HTTP 协议中两种请求方式，而 HTTP 协议是基于 TCP/IP 的应用层协议，无论 GET 还是 POST，"),a("font",{attrs:{color:"orange",size:"3"}},[t._v("用的都是同一个传输层协议，所以在传输上，没有区别。")])],1),t._v(" "),a("p",[t._v("报文格式上，不带参数时，最大区别就是第一行方法名不同")]),t._v(" "),a("ul",[a("li",[t._v("POST方法请求报文第一行是这样的 "),a("code",[t._v("POST /uri HTTP/1.1 \\r\\n")])]),t._v(" "),a("li",[t._v("GET方法请求报文第一行是这样的 "),a("code",[t._v("GET /uri HTTP/1.1 \\r\\n")])])]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("两种方法本质上是 TCP 连接，没有差别")]),t._v("，也就是说，如果我不按规范来也是可以的。我们可以在 URL 上写参数，然后方法使用 POST；也可以在 Body 写参数，然后方法使用 GET。当然，这需要服务端支持。")],1),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230219155515216.png",alt:"image-20230219155515216"}}),t._v(" "),a("h3",{attrs:{id:"常见问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[t._v("#")]),t._v(" 常见问题")]),t._v(" "),a("h4",{attrs:{id:"get-方法参数写法是固定的吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-方法参数写法是固定的吗"}},[t._v("#")]),t._v(" GET 方法参数写法是固定的吗？")]),t._v(" "),a("p",[t._v("在约定中，我们的参数是写在 "),a("code",[t._v("?")]),t._v(" 后面，用 "),a("code",[t._v("&")]),t._v(" 分割。")]),t._v(" "),a("p",[t._v("我们知道，解析报文的过程是通过获取 TCP 数据，用正则等工具从数据中获取 Header 和 Body，从而提取参数。")]),t._v(" "),a("p",[t._v("也就是说，我们可以自己约定参数的写法，只要服务端能够解释出来就行，一种比较流行的写法是 "),a("code",[t._v("http://www.example.com/user/name/chengqm/age/22")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"post-方法比-get-方法安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-方法比-get-方法安全"}},[t._v("#")]),t._v(" POST 方法比 GET 方法安全？")]),t._v(" "),a("p",[t._v("按照网上大部分文章的解释，POST 比 GET 安全，因为数据在地址栏上不可见。")]),t._v(" "),a("p",[t._v("然而，从传输的角度来说，他们都是不安全的，因为 HTTP 在网络上是明文传输的，只要在网络节点上抓包，就能完整地获取数据报文。")]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("要想安全传输，就只有加密，也就是 HTTPS")]),t._v("。")],1),t._v(" "),a("h4",{attrs:{id:"get-方法的长度限制是怎么回事"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-方法的长度限制是怎么回事"}},[t._v("#")]),t._v(" GET 方法的长度限制是怎么回事？")]),t._v(" "),a("p",[t._v("首先说明一点，"),a("font",{attrs:{color:"red",size:"3"}},[t._v("HTTP 协议没有 Body 和 URL 的长度限制，对 URL 限制的大多是浏览器和服务器的原因。")])],1),t._v(" "),a("p",[t._v("浏览器原因就不说了，"),a("font",{attrs:{color:"red",size:"3"}},[t._v("服务器是因为处理长 URL 要消耗比较多的资源，为了性能和安全（防止恶意构造长 URL 来攻击）考虑，会给 URL 长度加限制。")])],1),t._v(" "),a("h4",{attrs:{id:"post-方法会产生两个tcp数据包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-方法会产生两个tcp数据包"}},[t._v("#")]),t._v(" POST 方法会产生两个TCP数据包？")]),t._v(" "),a("p",[t._v("有些文章中提到，post 会将 header 和 body 分开发送，先发送 header，服务端返回 100 状态码再发送 body。")]),t._v(" "),a("p",[t._v("HTTP 协议中没有明确说明 POST 会产生两个 TCP 数据包，而且实际测试(Chrome)发现，header 和 body 不会分开发送。")]),t._v(" "),a("p",[t._v("所以，"),a("font",{attrs:{color:"red",size:"3"}},[t._v("header 和 body 分开发送是部分浏览器或框架的请求方法，不属于 post 必然行为。")])],1),t._v(" "),a("h2",{attrs:{id:"_4-http介绍一下-为什么http2-0不普及-websocket的基本指令-性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-http介绍一下-为什么http2-0不普及-websocket的基本指令-性能"}},[t._v("#")]),t._v(" 4. http介绍一下，为什么http2.0不普及，websocket的基本指令，性能")]),t._v(" "),a("p",[a("strong",[t._v("(可能过时了)")])]),t._v(" "),a("p",[t._v("关于http2不普及这个问题，可能随着时间过去，这个问题已经过时了，因此，这里提供一些看到的文章。")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.v2ex.com/t/554670",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么 http2 不流行？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://halfrost.com/http2-frequently-asked-questions/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2 中的常见问题"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://halfrost.com/quic_start/",target:"_blank",rel:"noopener noreferrer"}},[t._v("QUIC"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2017/05/websocket.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebSocket 教程"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"_5-爬虫-网站如何去做防止-如何判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-爬虫-网站如何去做防止-如何判断"}},[t._v("#")]),t._v(" 5. 爬虫，网站如何去做防止，如何判断")]),t._v(" "),a("h3",{attrs:{id:"如何判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何判断"}},[t._v("#")]),t._v(" 如何判断")]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("下面介绍4中最常见的形式：")])],1),t._v(" "),a("ul",[a("li",[a("strong",[t._v("cookie检测")])]),t._v(" "),a("li",[a("strong",[t._v("锁IP检测")])]),t._v(" "),a("li",[a("strong",[t._v("验证码检测")])]),t._v(" "),a("li",[a("strong",[t._v("请求头检测")])])]),t._v(" "),a("p",[t._v("1."),a("code",[t._v("cookie检测")]),t._v("，浏览器是会保存cookie的，这样网站会根据检测cookie来识别你是否是真实的用户，若是爬虫没有伪装好，将会触发被限制网页访问网页访问。\n同样网站是可以根据这些途径去监测是否有爬虫，爬虫工作者也都可以依照这原理去攻破。比如是利用IP检测的，我们就可以用代理IP来进行换IP处理。")]),t._v(" "),a("p",[t._v("2、"),a("code",[t._v("锁IP检测")]),t._v("，即会检测到用户锁IP网页访问网页访问的速度，要是访问速度达到设置的阈值，便会开启限制，封锁IP，让爬虫中止了脚步，不能够重复获取信息。针对锁IP检测，（ipidea）大量优质资源高匿的安全保障可以很好的攻破限制。\n3、"),a("code",[t._v("验证码检测")]),t._v("，设置登陆验证码限制，另外还有过快网页访问设置验证码限制等，若是没有输入正确的验证码，将没法再获取到信息。由于爬虫是可以借助其他的工具识别验证码，故网站不断的加深验证码的难度，从普通的纯数据研验证码到混合验证码，或者滑动验证码，图片验证码等。\n4、"),a("code",[t._v("请求头检测")]),t._v("，爬虫并不是用户，在访问浏览时，如果没有其他的特征，网站是可以根据检测爬虫的请求头来检测对方到底是用户或者爬虫。")]),t._v(" "),a("h3",{attrs:{id:"防爬虫"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防爬虫"}},[t._v("#")]),t._v(" 防爬虫")]),t._v(" "),a("p",[t._v("防爬虫，简单来说，就是在尽量减少对正常用户的干扰的情况下尽可能的加大爬虫的成本。")]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("常见的防爬虫方法: ")])],1),t._v(" "),a("ul",[a("li",[t._v("通过user-agent来控制访问")]),t._v(" "),a("li",[t._v("通过IP来限制")]),t._v(" "),a("li",[t._v("设置请求间隔")]),t._v(" "),a("li",[t._v("自动化测试工具Selenium")]),t._v(" "),a("li",[t._v("参数通过加密")]),t._v(" "),a("li",[t._v("通过robots.txt来限制爬虫")])]),t._v(" "),a("blockquote",[a("p",[t._v("爬虫不仅会占用大量的网站流量，造成有真正需求的用户无法进入网站，同时也可能会造成网站关键信息的泄漏，所以为了避免这种情况发生网站开发工程师必须掌握相应的反爬虫技术。下面为大家提供几种可行的反爬虫方案:")])]),t._v(" "),a("p",[t._v("1、通过user-agent来控制访问")]),t._v(" "),a("p",[a("font",{attrs:{color:"orange",size:"3"}},[t._v("user-agent能够使服务器识别出用户的操作系统及版本、cpu类型、浏览器类型和版本")]),t._v("。很多网站会设置user-agent白名单，只有在白名单范围内的请求才能正常访问。所以在我们的爬虫代码中需要设置user-agent伪装成一个浏览器请求。有时候服务器还可能会校验Referer，所以还可能需要设置Referer(用来表示此时的请求是从哪个页面链接过来的)。")],1),t._v(" "),a("p",[t._v("2、通过IP来限制")]),t._v(" "),a("p",[t._v("当我们用同一个ip多次频繁访问服务器时，服务器会检测到该请求可能是爬虫操作。因此就不能正常的响应页面的信息了。当然这种反爬虫技术可以通过使用IP代理池来反反爬虫。网上就有很多提供代理的网站。")]),t._v(" "),a("p",[t._v("3、设置请求间隔")]),t._v(" "),a("p",[t._v("一般爬虫抓取网站时会制定相应的爬虫策略，但是有些恶意的爬虫会不间断的工具某个网站，面对这种情况，我们可以通过设计请求间隔来实现反爬虫，避免在爬虫短时间内大量的访问请求影响网站的正常运行。")]),t._v(" "),a("p",[t._v("4、自动化测试工具Selenium")]),t._v(" "),a("p",[t._v("Web应用程序测试的Selenium工具。该工具可以用于单元测试，集成测试，系统测试等等。它可以像真正的用户一样去操作浏览器(包括字符填充、鼠标点击、获取元素、页面切换)，支持Mozilla Firefox、Google、Chrome、Safari、Opera、IE等等浏览器。")]),t._v(" "),a("p",[t._v("5、参数通过加密")]),t._v(" "),a("p",[t._v('某些网站可能会将参数进行某些加密，或者对参数进行拼接发送给服务器，以此来达到反爬虫的目的。这个时候我们可以试图通过js代码，查看破解的办法。或者可以使用"PhantomJS",PhantomJS是一个基于Webkit的"无界面"(headless)浏览器，它会把网站加载到内存并执行页面上的JavaScript，因为不会展示图形界面，所以运行起来比完整的浏览器更高效。')]),t._v(" "),a("p",[t._v("6、通过robots.txt来限制爬虫")]),t._v(" "),a("p",[t._v("robots.txt是一个限制爬虫的规范，该文件是用来声明哪些东西不能被爬取。如果根目录存在该文件，爬虫就会按照文件的内容来爬取指定的范围。例如大家可以尝试方位淘宝的robots.txt文件："),a("code",[t._v("https://error.taobao.com/robots.txt")]),t._v("。可以看到淘宝对爬虫访问的限制。"),a("code",[t._v("User-agent: *")]),t._v("表示禁止一切爬虫访问。")]),t._v(" "),a("p",[t._v("爬虫与反爬虫是互联网开发工程师之间的斗智斗勇。作为网站开发者即要掌握爬虫的技术，还要跟进一步去了解如何实现反爬虫。")]),t._v(" "),a("h2",{attrs:{id:"_6-重点-tcp和udp区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-重点-tcp和udp区别"}},[t._v("#")]),t._v(" 6. (重点)tcp和udp区别")]),t._v(" "),a("h3",{attrs:{id:"tcp-ip网络模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip网络模型"}},[t._v("#")]),t._v(" TCP/IP网络模型")]),t._v(" "),a("p",[t._v("TCP/IP模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。")]),t._v(" "),a("ul",[a("li",[t._v("链路层：负责封装和解封装IP报文，发送和接受ARP/RARP报文等。")]),t._v(" "),a("li",[t._v("网络层：负责路由以及把分组报文发送给目标网络或主机。")]),t._v(" "),a("li",[t._v("传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。")]),t._v(" "),a("li",[t._v("应用层：负责向用户提供应用程序，比如"),a("code",[t._v("HTTP、FTP")]),t._v("、Telnet、DNS、SMTP等。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/03fe8bd5a78d4b4081c2485bf7c6c29b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"tcp、udp区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp、udp区别"}},[t._v("#")]),t._v(" TCP、UDP区别")]),t._v(" "),a("ul",[a("li",[t._v("TCP是面向连接的、可靠的、基于字节流的"),a("strong",[t._v("传输层协议")])]),t._v(" "),a("li",[t._v("UDP是一个面向无连接，基于报文的"),a("strong",[t._v("传输层协议")])])]),t._v(" "),a("p",[a("strong",[t._v("详细的区别：")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("UDP")]),t._v(" "),a("th",[t._v("TCP")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("是否连接")]),t._v(" "),a("td",[t._v("无连接")]),t._v(" "),a("td",[t._v("面向连接")])]),t._v(" "),a("tr",[a("td",[t._v("是否可靠")]),t._v(" "),a("td",[t._v("不可靠传输，不使用流量控制和拥塞控制")]),t._v(" "),a("td",[t._v("可靠传输，使用流量控制和拥塞控制")])]),t._v(" "),a("tr",[a("td",[t._v("连接对象个数")]),t._v(" "),a("td",[t._v("支持一对一，一对多，多对一和多对多交互通信")]),t._v(" "),a("td",[t._v("只能是一对一通信")])]),t._v(" "),a("tr",[a("td",[t._v("传输方式")]),t._v(" "),a("td",[t._v("面向报文")]),t._v(" "),a("td",[t._v("面向字节流")])]),t._v(" "),a("tr",[a("td",[t._v("首部开销")]),t._v(" "),a("td",[t._v("首部开销小，仅8字节")]),t._v(" "),a("td",[t._v("首部最小20字节，最大60字节")])]),t._v(" "),a("tr",[a("td",[t._v("适用场景")]),t._v(" "),a("td",[t._v("适用于实时应用（IP电话、视频会议、直播等）")]),t._v(" "),a("td",[t._v("适用于要求可靠传输的应用，例如文件传输")])])])]),t._v(" "),a("p",[t._v("1、")]),t._v(" "),a("ul",[a("li",[t._v("tcp是基于连接的，可靠性高；")]),t._v(" "),a("li",[t._v("udp是基于无连接的，可靠性较低；")])]),t._v(" "),a("p",[t._v("2、")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("由于tcp是连接的通信，需要有三次握手、重新确认等连接过程，会有延时，实时性差；由于协议所致，安全性较高；")])]),t._v(" "),a("li",[a("p",[t._v("而udp无连接，无建立连接的过程，因而实时性较强，安全略差；")])])]),t._v(" "),a("p",[t._v("3、")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在传输相同大小的数据时，tcp首部开销20字节；")])]),t._v(" "),a("li",[a("p",[t._v("udp首部开销只有8个字节，tcp报头比udp复杂，故实际包含的用户数据较少。")])]),t._v(" "),a("li",[a("p",[t._v("tcp无丢包，而udp有丢包，故tcp开销大，udp开销较小；")])])]),t._v(" "),a("p",[t._v("4、")]),t._v(" "),a("ul",[a("li",[t._v("每条tcp连接只能是点到点的；")]),t._v(" "),a("li",[t._v("udp支持一对一、一对多、多对一、多对多的交互通信。")])]),t._v(" "),a("p",[t._v("5、")]),t._v(" "),a("p",[t._v("​\t应用场景的区别：")]),t._v(" "),a("ul",[a("li",[t._v("由于TCP和UDP的特点，如果对实时性要求高和高速传输的场景下需要使用UDP；")]),t._v(" "),a("li",[t._v("如果需要传输大量数据且对数据可靠性要求高的场景使用TCP；")]),t._v(" "),a("li",[t._v("在可靠性要求低追求效率的情况使用UDP；")])]),t._v(" "),a("h2",{attrs:{id:"_7-如果让你做一个视频聊天软件-你用tcp还是udp-为什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-如果让你做一个视频聊天软件-你用tcp还是udp-为什么"}},[t._v("#")]),t._v(" 7.  如果让你做一个视频聊天软件，你用tcp还是udp？为什么？")]),t._v(" "),a("p",[t._v("TCP 和 UDP 协议在传输上有很多的差别，首先 TCP 面向连接，而 UDP 是无连接的。而 TCP 注重提供可靠的服务。能保证连接传送的数据，无差错，不丢失，不重复，且按序到达。而 UDP 是尽最大努力交付，即不保证可靠交付。")]),t._v(" "),a("p",[t._v("因此传统的 TCP 协议并不是为实时媒体传输设计的，这就导致了它在弱网环境下的产生的延时相当大。因此在音视频传输时需要对网络协议进行优化。")]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("UDP 协议就比较适合用于实时音视频通讯")]),t._v("，首先它是允许端到端的全链条信道策略控制，可以保证弱网环境下播放的流畅性。"),a("font",{attrs:{color:"orange",size:"3"}},[t._v("在丢包方面 UDP 协议也更加灵活，方便我们在视频流畅与画质之间做好平衡。")])],1),t._v(" "),a("p",[t._v("再者是网络优化 CDN 业务，CDN 可以将视频内容分发至全网加速节点，让用户可以就近获取需要的内容，降低视频延迟。")]),t._v(" "),a("h2",{attrs:{id:"_8-重点-tcp是怎么去保证可靠传输的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-重点-tcp是怎么去保证可靠传输的"}},[t._v("#")]),t._v(" 8 (重点)tcp是怎么去保证可靠传输的")]),t._v(" "),a("ul",[a("li",[t._v("应用数据被分割成 TCP 认为最适合发送的数据块。")]),t._v(" "),a("li",[t._v("TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。")]),t._v(" "),a("li",[a("code",[t._v("校验和")]),t._v("：TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。")]),t._v(" "),a("li",[t._v("TCP 的接收端会丢弃重复的数据。")]),t._v(" "),a("li",[a("code",[t._v("流量控制")]),t._v("：TCP  连接的每一方都有固定大小的缓冲空间，"),a("font",{attrs:{color:"red",size:"3"}},[t._v("TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据")]),t._v("。当接收方来不及处理发送方的数据，能"),a("font",{attrs:{color:"red",size:"3"}},[t._v("提示发送方降低发送的速率")]),t._v("，防止包丢失。"),a("font",{attrs:{color:"red",size:"3"}},[t._v("TCP 使用的流量控制协议是可变大小的滑动窗口协议")]),t._v("。 （TCP 利用滑动窗口实现流量控制）")],1),t._v(" "),a("li",[a("code",[t._v("拥塞控制")]),t._v("："),a("font",{attrs:{color:"red",size:"3"}},[t._v("当网络拥塞时，减少数据的发送")]),t._v("。")],1),t._v(" "),a("li",[a("code",[t._v("ARQ(自动重传请求)协议")]),t._v("：也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。")]),t._v(" "),a("li",[a("code",[t._v("超时重传")]),t._v("：当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。")])]),t._v(" "),a("h2",{attrs:{id:"_9-tcp三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-tcp三次握手"}},[t._v("#")]),t._v(" 9 tcp三次握手")]),t._v(" "),a("p",[t._v("三次握手要确认双方的两样能力：发送能力与接收的能力。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20220422100409761.png",alt:"image-20220422100409761"}})]),t._v(" "),a("p",[t._v("最开始双方都属于CLOSED状态。然后服务器开始监听某个端口，进入LISTEN状态。")]),t._v(" "),a("ul",[a("li",[t._v("客户端注重发起连接，发送SYN，自己变成了SYN-SENT状态")]),t._v(" "),a("li",[t._v("服务端收到，返回SYN和ACK（对应客户端发来的SYN），自己变成了SYN-RECD")]),t._v(" "),a("li",[t._v("客户端再发送ACK给服务端，自己变成ESTABLISHED（established）状态；服务端收到ACK之后，也变成这个状态")])]),t._v(" "),a("h2",{attrs:{id:"_10-tcp握手结束第一次的包有多大"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-tcp握手结束第一次的包有多大"}},[t._v("#")]),t._v(" 10 tcp握手结束第一次的包有多大")]),t._v(" "),a("p",[a("strong",[t._v("（可能太冷门了）")])]),t._v(" "),a("p",[t._v("这个问题我在网上搜了搜，我觉得应该是问的这个问题：握手结束后第一次发送数据的ACKnum是多少？")]),t._v(" "),a("blockquote",[a("p",[t._v("当然你有新的解释与建议，可以在下面回复补充，谢谢~")])]),t._v(" "),a("p",[t._v("RFC793中有如下显示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20220422100646641.png",alt:"image-20220422100646641"}})]),t._v(" "),a("blockquote",[a("p",[t._v("可以看到，三次握手后(第4点，为第三次握手)，再次发送数据ACKnum与第三次握手是一样的。")])]),t._v(" "),a("p",[t._v("参考：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.ietf.org/rfc/rfc793.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC793"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_11-tcp的超时重传"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-tcp的超时重传"}},[t._v("#")]),t._v(" 11 TCP的超时重传")]),t._v(" "),a("p",[t._v("超时重传是TCP协议保证数据可靠性的另一个重要机制，其原理是在发送某一个数据以后就开启一个"),a("a",{attrs:{href:"https://baike.baidu.com/item/%E8%AE%A1%E6%97%B6%E5%99%A8/3858486",target:"_blank",rel:"noopener noreferrer"}},[t._v("计时器"),a("OutboundLink")],1),t._v("，在一定时间内如果没有得到发送的数据报的ACK"),a("a",{attrs:{href:"https://baike.baidu.com/item/%E6%8A%A5%E6%96%87/3164352",target:"_blank",rel:"noopener noreferrer"}},[t._v("报文"),a("OutboundLink")],1),t._v("，那么就重新发送数据，直到发送成功为止。")]),t._v(" "),a("h2",{attrs:{id:"_12-tcp为什么是三次握手呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-tcp为什么是三次握手呢"}},[t._v("#")]),t._v(" 12 TCP为什么是三次握手呢？")]),t._v(" "),a("p",[a("strong",[t._v("原因一：防止重复连接:三次握手的主要原因是为了防止旧的重复连接引起连接混乱问题")])]),t._v(" "),a("p",[t._v("比如在网络状况比较复杂或者网络状况比较差的情况下，发送方可能会连续发送多次建立连接的请求。"),a("font",{attrs:{color:"red",size:"3"}},[t._v("如果 TCP 握手的次数只有两次，那么接收方只能选择接受请求或者拒绝接受请求")]),t._v("，但"),a("font",{attrs:{color:"red",size:"3"}},[t._v("它并不清楚这次的请求是正常的请求，还是由于网络环境问题而导致的过期请求")]),t._v("，如果是过期请求的话就会造成错误的连接。")],1),t._v(" "),a("p",[t._v("所以"),a("strong",[t._v("如果 TCP 是三次握手的话，那么客户端在接收到服务器端 SEQ+1 的消息之后，就可以判断当前的连接是否为历史连接，如果判断为历史连接的话就会发送终止报文（RST）给服务器端终止连接；如果判断当前连接不是历史连接的话就会发送指令给服务器端来建立连接。")])]),t._v(" "),a("p",[a("strong",[t._v("原因二：同步初始化序列化")])]),t._v(" "),a("p",[t._v("通过上面的概念我们知道 "),a("font",{attrs:{color:"red",size:"3"}},[t._v("TCP 的一个重要特征就是可靠性")]),t._v("，"),a("strong",[t._v("而 TCP 为了保证在不稳定的网络环境中构建一个稳定的数据连接，它就需要一个“序列号”字段来保证自己的稳定性")]),t._v("，而这个序列号的作用就是防止数据包重复发送，以及有效的解决数据包接收时顺序颠倒的问题。")],1),t._v(" "),a("p",[t._v("那么在建立 TCP 连接时就需要同步初始化一个序列号来保证 TCP 的稳定性，因此它需要执行以下过程：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("首先客户端发送一个携带了初始序列号的 SYN 报文给服务器端；\n\n服务端接收到消息之后会回复一个 ACK 的应答报文，表示客户端的 SYN 报文已被服务端成功接收了；\n\n而客户端收到消息之后也会发送一个 ACK 给服务端，服务器端拿到这个消息之后，我们就可以得到一个可靠的初始化序列号了。\n")])])]),a("p",[t._v("而"),a("font",{attrs:{color:"red",size:"3"}},[t._v("如果是两次握手的话，就无法进行序列号的确认工作了")]),t._v("，因此也就无法得到一个可靠的序列号了，所以 TCP 连接至少需要三次握手。")],1),t._v(" "),a("p",[t._v("以上两种原因就是 TCP 连接为什么需要三次握手的主要原因，当然 TCP 连接还可以四次握手，甚至是五次握手，也能实现 TCP 连接的稳定性，但三次握手是最节省资源的连接方式，因此 TCP 连接应该为三次握手。")]),t._v(" "),a("h2",{attrs:{id:"_13-tcp如何去终止之前发送报文的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-tcp如何去终止之前发送报文的"}},[t._v("#")]),t._v(" 13 TCP如何去终止之前发送报文的？")]),t._v(" "),a("p",[t._v("终止一个连接则需四个分节，即四次挥手")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20220705165640913.png",alt:"image-20220705165640913"}})]),t._v(" "),a("p",[t._v("客户端: \t我不连了")]),t._v(" "),a("p",[t._v("服务端：   嗯，我知道了，我允许你断开，但是我等我现在发的东西发完，现在还不能断开  （此过程为ACK发送）")]),t._v(" "),a("p",[t._v("服务端：  东西我发完了，咱们断了吧   （此过程为FIN发送）")]),t._v(" "),a("p",[t._v("客户端：  我知晓了，再见")]),t._v(" "),a("h2",{attrs:{id:"_14-tcp拥塞控制-四部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-tcp拥塞控制-四部分"}},[t._v("#")]),t._v(" 14 tcp拥塞控制（四部分）")]),t._v(" "),a("p",[t._v("文字版如下：")]),t._v(" "),a("ul",[a("li",[t._v("如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。")]),t._v(" "),a("li",[a("font",{attrs:{color:"red",size:"3"}},[t._v("TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。")])],1),t._v(" "),a("li",[t._v("发送方需要"),a("font",{attrs:{color:"red",size:"3"}},[t._v("维护一个叫做拥塞窗口（cwnd）的状态变量")]),t._v("，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。")],1),t._v(" "),a("li",[t._v("为了便于讨论，做如下假设：")]),t._v(" "),a("li",[t._v("接收方有足够大的接收缓存，因此不会发生流量控制；")]),t._v(" "),a("li",[t._v("虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("慢开始与拥塞避免")])])]),t._v(" "),a("ul",[a("li",[t._v("发送的最初执行慢开始，令 cwnd = 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 ...")]),t._v(" "),a("li",[t._v("注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。"),a("font",{attrs:{color:"red",size:"3"}},[t._v("设置一个慢开始门限 ssthresh，当 cwnd >= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1")]),t._v("。")],1)]),t._v(" "),a("p",[t._v("如果出现了超时，则令 ssthresh = cwnd / 2，然后重新执行慢开始。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("快重传与快恢复")])])]),t._v(" "),a("ul",[a("li",[t._v("在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M1 和 M2，此时收到 M4，应当发送对 M2 的确认。")]),t._v(" "),a("li",[t._v("在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M2，则 M3 丢失，立即重传 M3。")]),t._v(" "),a("li",[t._v("在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh = cwnd / 2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。")]),t._v(" "),a("li",[t._v("慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。")])]),t._v(" "),a("p",[t._v("这部分我也觉得文字部分太生硬了，开始我也不怎么理解，看来一个视频之后我了解了基本原理，这里我文字版和视频地址都放上来。")]),t._v(" "),a("p",[t._v("视频地址如下："),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav83688722%3Ffrom%3Dsearch%26seid%3D15487015846130335760",target:"_blank",rel:"noopener noreferrer"}},[t._v("拥塞控制视频版"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_15-cdn的原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-cdn的原理是什么"}},[t._v("#")]),t._v(" 15 CDN的原理是什么")]),t._v(" "),a("h3",{attrs:{id:"cdn是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cdn是什么"}},[t._v("#")]),t._v(" cdn是什么")]),t._v(" "),a("p",[t._v("CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。")]),t._v(" "),a("h3",{attrs:{id:"原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),a("p",[t._v("CDN的基本原理是在用户访问相对集中的地区和网络设置一些缓存服务器。当用户访问网站时，利用全局的负载均衡技术将用户的访问指向距离最近的缓存服务器，由缓存服务器代替源站响应用户的访问请求。这样一方面减轻了源站服务器的工作压力，另一方面使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度")]),t._v(" "),a("h2",{attrs:{id:"_16-dns过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-dns过程"}},[t._v("#")]),t._v(" 16 dns过程")]),t._v(" "),a("h3",{attrs:{id:"什么是dns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是dns"}},[t._v("#")]),t._v(" 什么是DNS")]),t._v(" "),a("p",[t._v("说白了就是将域名转化为ip，比如www.qq.com，这是域名，可以是网络包需要对方ip地址，域名是不能加入网络包报头的，所以就需要去找一个服务器问，qq的域名对应的ip是多少。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/445331c021914140884f047bba7d1e1e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"通信过程如下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通信过程如下"}},[t._v("#")]),t._v(" 通信过程如下：")]),t._v(" "),a("ul",[a("li",[t._v("用户主机上运行着"),a("code",[t._v("DNS")]),t._v("的客户端，就是我们的PC机或者手机客户端运行着DNS客户端了")]),t._v(" "),a("li",[a("font",{attrs:{color:"red",size:"3"}},[t._v("浏览器将接收到的url中抽取出域名字段")]),t._v("，就是访问的主机名，比如"),a("code",[t._v("http://www.baidu.com/")]),t._v(", "),a("font",{attrs:{color:"red",size:"3"}},[t._v("并将这个主机名传送给DNS应用的客户端")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"red",size:"3"}},[t._v("DNS客户机端向DNS服务器端发送一份"),a("code",[t._v("查询报文")])]),t._v("，报文中包含着要访问的"),a("code",[t._v("主机名字段")]),t._v("（中间包括一些列缓存查询以及分布式DNS集群的工作）")],1),t._v(" "),a("li",[a("font",{attrs:{color:"red",size:"3"}},[t._v("该DNS客户机最终会收到一份"),a("code",[t._v("回答报文")]),t._v("，其中包含有该主机名对应的"),a("code",[t._v("IP地址")])])],1),t._v(" "),a("li",[t._v("一旦该浏览器收到来自DNS的IP地址，就可以向该IP地址定位的HTTP服务器发起TCP连接")])]),t._v(" "),a("p",[t._v("这里需要补充一个小知识，关于域名的，大概了解一下就行")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/d2201e923325411795399ebba78a32f6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"img"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/0bc043d7129b453c91b591536d801e8b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"_17-http协议-1-1和2-0的区别-了解哪些请求方法-请求-响应头部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-http协议-1-1和2-0的区别-了解哪些请求方法-请求-响应头部"}},[t._v("#")]),t._v(" 17 HTTP协议，1.1和2.0的区别，了解哪些请求方法，请求/响应头部")]),t._v(" "),a("p",[t._v("HTTP2.0相比HTTP1.1支持的特性：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("新的二进制格式：HTTP1.1的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。\n\n多路复用，即连接共享，即每一个request都是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。\n\n头部压缩，HTTP1.1的头部（header）带有大量信息，而且每次都要重复发送；HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。\n\n服务端推送：服务器除了对最初请求的响应外，服务器还可以额外的向客户端推送资源，而无需客户端明确的请求。\n")])])]),a("h2",{attrs:{id:"_18-为什么项目不用https-以及http与https的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-为什么项目不用https-以及http与https的区别"}},[t._v("#")]),t._v(" 18 为什么项目不用https,以及http与https的区别")]),t._v(" "),a("h3",{attrs:{id:"http与https区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http与https区别"}},[t._v("#")]),t._v(" http与https区别")]),t._v(" "),a("p",[a("strong",[t._v("HTTP协议以明文的方式发送内容")]),t._v("，不提供任何方式的数据加密。")]),t._v(" "),a("p",[t._v("攻击者很容易截取了浏览器和网站服务器之间的传输报文，直接读取里面的信息。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20220705185829808.png",alt:"image-20220705185829808"}})]),t._v(" "),a("p",[a("strong",[t._v("HTTPS协议由HTTP进行通信，只不过利用了SSL/TLS来加密数据包。")])]),t._v(" "),a("p",[t._v("这样攻击者就算截取到了浏览器和网站服务器之间的传输报文也很难读取里面的信息，除非有相应的密钥进行解密。HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了攻击者的攻击成本。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/dcc451da81cb39db47a050f35d245323aa1830e8.jpeg",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("HTTP和HTTPS协议的区别")])]),t._v(" "),a("p",[t._v("HTTPS协议在语法、语义上和HTTP一样，HTTP有的，HTTPS也照单全收。")]),t._v(" "),a("p",[t._v("通常情况下，HTTP会先直接和TCP进行通信。在使用SSL（安全套接字协议）的HTTPS后，就演变成和SSL进行通信，再由SSL和TCP进行通信。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/024f78f0f736afc35c54e1af3d2bb1c3b645125d.jpeg",alt:"img"}})]),t._v(" "),a("p",[a("strong",[t._v("区别在于：")])]),t._v(" "),a("p",[t._v("1、HTTP的连接很简单，明文传输，通过80端口连接。")]),t._v(" "),a("p",[t._v("2、HTTPS是由SSL+HTTP构建的可进行身份认证、加密传输的协议，相对更安全，通过443端口连接。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/11385343fbf2b211ef11b34641b23f3f0cd78eb0.jpeg",alt:"img"}})]),t._v(" "),a("p",[t._v("3、HTTPS需要到证书颁发机构申请证书。")]),t._v(" "),a("p",[t._v("由此可见HTTPS可以对内容传输结果进行完整性校验，内容结果对称加密，每个连接生产一个唯一的加密密钥，第三方无法伪造服务端或客户端身份。")]),t._v(" "),a("h3",{attrs:{id:"为什么项目不用https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么项目不用https"}},[t._v("#")]),t._v(" 为什么项目不用https")]),t._v(" "),a("p",[t._v("HTTPS的缺点")]),t._v(" "),a("ul",[a("li",[t._v("SSL的"),a("font",{attrs:{color:"red",size:"3"}},[t._v("专业证书需要购买")]),t._v("，功能越是强大的证书费用越高。个人网站、小网站可以选择入门级别免费证书。")],1),t._v(" "),a("li",[t._v("SSL证书通常需要绑定固定IP，为服务器增加固定IP会增加一定费用。")]),t._v(" "),a("li",[t._v("SSL证书的信用链体系并不安全。某些国家可以控制CA根证书的情况下，中间人攻击一样可行。")]),t._v(" "),a("li",[a("font",{attrs:{color:"red",size:"3"}},[t._v("HTTPS连接服务器端资源占用较多，会影响缓存增加数据开销和功耗，会使页面的加载时间延长近50%，增加10%-20%的耗电，相同负载下会增加带宽和服务器投入成本。")])],1),t._v(" "),a("li",[t._v("HTTPS协议的安全有范围，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到作用。")])]),t._v(" "),a("h3",{attrs:{id:"https既然有那么多缺点-那是不是就不做了呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https既然有那么多缺点-那是不是就不做了呢"}},[t._v("#")]),t._v(" HTTPS既然有那么多缺点，那是不是就不做了呢？")]),t._v(" "),a("p",[t._v("不是，“金无足赤，人无完人”，实际上越来越多的网站配置SSL证书，它可以有效地保护网络隐私，这已经成为了大众化的安全需求趋势。随着技术的发展很多的缺点也在弥补和优化，比如："),a("font",{attrs:{color:"red",size:"3"}},[t._v("很多服务器提供商推出了"),a("strong",[t._v("免费证书")]),t._v("和一站式HTTPS搭建服务，打开速度问题也可以通过"),a("strong",[t._v("CDN加速")]),t._v("服务解决。")])],1),t._v(" "),a("p",[t._v("实际上HTTPS也并不会影响搜索引擎抓取、收录内容，Google、百度建议所有网站尽可能都使用HTTPS。")]),t._v(" "),a("h2",{attrs:{id:"_19-https的加密过程以及如何防止中间人攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-https的加密过程以及如何防止中间人攻击"}},[t._v("#")]),t._v(" 19 https的加密过程以及如何防止中间人攻击")]),t._v(" "),a("p",[t._v("参考文章: https://juejin.cn/post/6844904150115827725")]),t._v(" "),a("h3",{attrs:{id:"对称加密-非对称加密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对称加密-非对称加密"}},[t._v("#")]),t._v(" 对称加密，非对称加密")]),t._v(" "),a("p",[t._v("在认识https的加密过程前，先认识下"),a("strong",[t._v("对称加密")]),t._v("和"),a("strong",[t._v("非对称加密")])]),t._v(" "),a("ul",[a("li",[t._v("对称加密：所谓对称 就是指两边一样 发送方和接收方都用的同一个密钥 加密解密都是同一个密钥 从始至终只需要保存"),a("strong",[t._v("一个密钥")]),t._v("就行")]),t._v(" "),a("li",[t._v("非对称加密：发送方和接收方使用"),a("strong",[t._v("一对密钥")]),t._v("，即"),a("strong",[t._v("公钥和私钥")]),t._v("。一般私钥是保密不能被泄露的，公钥可以对外传播。我们可以用公钥加密私钥解密（数据加密） 也可用私钥加密公钥解密（签名--下面会解释）")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/3727a8c3dd614cb2a001947938bb6f2c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"重点-对称加密-非对称加密优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重点-对称加密-非对称加密优缺点"}},[t._v("#")]),t._v(" (重点)对称加密，非对称加密优缺点")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("加密方式")]),t._v(" "),a("th",[t._v("优点")]),t._v(" "),a("th",[t._v("缺点")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("对称加密")]),t._v(" "),a("td",[t._v("速度快")]),t._v(" "),a("td",[t._v("密钥不可能一开始在发送方和接收方都全部生成好了 需要在一方生成之后传递给另一方 如果在传递过程密钥被劫持 整个加密就不安全了")])]),t._v(" "),a("tr",[a("td",[t._v("非对称加密")]),t._v(" "),a("td",[t._v("较安全")]),t._v(" "),a("td",[t._v("1.加解密速度慢-数据传输效率降低 2.公钥对外公开 如果密文是私钥加密 那么任何人都能用公钥解密")])])])]),t._v(" "),a("h3",{attrs:{id:"https的加密过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https的加密过程"}},[t._v("#")]),t._v(" https的加密过程")]),t._v(" "),a("p",[a("strong",[t._v("混合加密")])]),t._v(" "),a("p",[t._v("知道了两种加密方式的优缺点之后  我们的HTTPS就很厉害了 它采用两者混合的加密方式 不是说对称加密的密钥不安全吗 那我们换一种思路 我们在传递过程"),a("strong",[t._v("把我们的对称加密中的密钥用非对称加密的方式去传递")]),t._v("就好了  哈哈  这句话有点绕 我们上图")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/63f3952aafc544119f892acfcf94a957~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp",alt:"img"}})]),t._v(" "),a("ol",[a("li",[t._v("客户端生成会话秘钥就是我们对称加密生成的密钥")]),t._v(" "),a("li",[t._v("它用公钥加密之后进行传递(这个时候被加密的不是数据  是这个会话秘钥 等于把钥匙加密了)  这里的公钥就是非对称加密中的公钥 他是由服务器传递过去的（对外公开）")]),t._v(" "),a("li",[t._v("服务端用非对称加密的私钥去解密 拿到我们的会话秘钥")]),t._v(" "),a("li",[t._v("客户端和服务端都能用同一个会话秘钥进行加解密了")])]),t._v(" "),a("p",[a("strong",[t._v("就算传输过程被攻击者截取到了被加密的会话秘钥 他没有服务器的私钥是无法得到会话秘钥的")])]),t._v(" "),a("blockquote",[a("p",[t._v("整个过程巧妙之处就在于 之前我们传递的是钥匙  现在我们传递的是保险箱  钥匙在保险箱里面 你就算拿到了保险箱 没有保险箱的钥匙也拿不到钥匙")])]),t._v(" "),a("h3",{attrs:{id:"防止中间人攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防止中间人攻击"}},[t._v("#")]),t._v(" 防止中间人攻击")]),t._v(" "),a("h3",{attrs:{id:"https原理一览图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https原理一览图"}},[t._v("#")]),t._v(" https原理一览图")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/c3de1334624747b5b74808a9c1d7585b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"_20-为什么tcp连接是可靠的-校验和重传"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-为什么tcp连接是可靠的-校验和重传"}},[t._v("#")]),t._v(" 20 为什么tcp连接是可靠的（校验和重传）")]),t._v(" "),a("p",[t._v("主要通过以下四种方式实现可靠传输机制：")]),t._v(" "),a("ul",[a("li",[t._v("校验")]),t._v(" "),a("li",[t._v("序号")]),t._v(" "),a("li",[t._v("确认")]),t._v(" "),a("li",[t._v("重传")])]),t._v(" "),a("h2",{attrs:{id:"_21-通过什么机制处理服务端接收数据乱序丢包等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-通过什么机制处理服务端接收数据乱序丢包等"}},[t._v("#")]),t._v(" 21 通过什么机制处理服务端接收数据乱序丢包等")]),t._v(" "),a("ul",[a("li",[t._v("滑动窗口")]),t._v(" "),a("li",[t._v("拥塞控制")])]),t._v(" "),a("h2",{attrs:{id:"_22-在tcp建立连接后-路由器发生了什么变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-在tcp建立连接后-路由器发生了什么变化"}},[t._v("#")]),t._v(" 22 在TCP建立连接后，路由器发生了什么变化")]),t._v(" "),a("h2",{attrs:{id:"_23-http的header和body-讲的很详细-请求方式-请求头内容-状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-http的header和body-讲的很详细-请求方式-请求头内容-状态码"}},[t._v("#")]),t._v(" 23 http的header和body  讲的很详细 请求方式 请求头内容 状态码")]),t._v(" "),a("p",[a("code",[t._v("header")]),t._v("主要来存放cookie，token等信息的")]),t._v(" "),a("p",[a("code",[t._v("body")]),t._v("主要用来存放post的一些数据，比如")]),t._v(" "),a("h2",{attrs:{id:"_24-http2相关问题。在http1的时代-会经常把很多资源部署在不同域名下-为什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-http2相关问题。在http1的时代-会经常把很多资源部署在不同域名下-为什么"}},[t._v("#")]),t._v(" 24 http2相关问题。在http1的时代，会经常把很多资源部署在不同域名下，为什么？")]),t._v(" "),a("p",[t._v("（有可能是减少cookie的传输量）")]),t._v(" "),a("h2",{attrs:{id:"_25-tcp和udp的区别和场景-又问如果让你设计一个既保证准确性速度又快的协议-怎么做"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-tcp和udp的区别和场景-又问如果让你设计一个既保证准确性速度又快的协议-怎么做"}},[t._v("#")]),t._v(" 25 TCP和UDP的区别和场景，又问如果让你设计一个既保证准确性速度又快的协议，怎么做")]),t._v(" "),a("h3",{attrs:{id:"tcp和udp的区别和场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp的区别和场景"}},[t._v("#")]),t._v(" TCP和UDP的区别和场景")]),t._v(" "),a("p",[t._v("首先")]),t._v(" "),a("ul",[a("li",[t._v("TCP是面向连接的、可靠的、基于字节流的传输层协议")]),t._v(" "),a("li",[t._v("UDP是一个面向无连接的传输层协议")])]),t._v(" "),a("p",[t._v("详细的区别：")]),t._v(" "),a("p",[t._v("1、")]),t._v(" "),a("ul",[a("li",[t._v("tcp是基于连接的，可靠性高；")]),t._v(" "),a("li",[t._v("udp是基于无连接的，可靠性较低；")])]),t._v(" "),a("p",[t._v("2、")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("由于tcp是连接的通信，需要有三次握手、重新确认等连接过程，会有延时，实时性差；由于协议所致，安全性较高；")])]),t._v(" "),a("li",[a("p",[t._v("而udp无连接，无建立连接的过程，因而实时性较强，安全略差；")])])]),t._v(" "),a("p",[t._v("3、在传输相同大小的数据时，tcp首部开销20字节；udp首部开销只有8个字节，tcp报头比udp复杂，故实际包含的用户数据较少。tcp无丢包，而udp有丢包，故tcp开销大，udp开销较小；")]),t._v(" "),a("p",[t._v("4、每条tcp连接只能是点到点的；udp支持一对一、一对多、多对一、多对多的交互通信。")]),t._v(" "),a("p",[t._v("应用场景的区别：")]),t._v(" "),a("ul",[a("li",[t._v("由于TCP和UDP的特点，如果对实时性要求高和高速传输的场景下需要使用UDP；")]),t._v(" "),a("li",[t._v("如果需要传输大量数据且对数据可靠性要求高的场景使用TCP；")]),t._v(" "),a("li",[t._v("在可靠性要求低追求效率的情况使用UDP；")])]),t._v(" "),a("h3",{attrs:{id:"设计一个既保证准确性速度又快的协议-怎么做"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计一个既保证准确性速度又快的协议-怎么做"}},[t._v("#")]),t._v(" 设计一个既保证准确性速度又快的协议，怎么做")]),t._v(" "),a("h2",{attrs:{id:"_26-osi7层模型-每层大致用处及相关协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-osi7层模型-每层大致用处及相关协议"}},[t._v("#")]),t._v(" 26 OSI7层模型 每层大致用处及相关协议")]),t._v(" "),a("p",[a("code",[t._v("OSI")]),t._v("参考模型是网络互连的"),a("code",[t._v("七层")]),t._v("框架, 这里不详细介绍了，每一层的具体内容会在后面介绍，这里只需要有一个初步的印象。")]),t._v(" "),a("p",[t._v("如下图所示，1，2，3层主要是是"),a("code",[t._v("物理链路")]),t._v("组成的，比如"),a("code",[t._v("光纤")]),t._v("，"),a("code",[t._v("路由器")]),t._v("，"),a("code",[t._v("集线器")]),t._v("，主要负责的是"),a("code",[t._v("数据通信")]),t._v("。5，6，7层是"),a("code",[t._v("软件控制的")]),t._v("，比如"),a("code",[t._v("http")]),t._v("协议，是一种软件层面控制的协议，主要负责处理传输来的"),a("code",[t._v("数据")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/013278577b7c4296932e44d20a1e6d7a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"_27-https-http2-0-websocket-提了一下-tls握手-怎么知道数字证书的真假"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27-https-http2-0-websocket-提了一下-tls握手-怎么知道数字证书的真假"}},[t._v("#")]),t._v(" 27 https,http2.0，websocket(提了一下)，TLS握手，怎么知道数字证书的真假")]),t._v(" "),a("h2",{attrs:{id:"_28-http2-0有了解吗-有抓包看看到底什么个情况吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_28-http2-0有了解吗-有抓包看看到底什么个情况吗"}},[t._v("#")]),t._v(" 28 http2.0有了解吗？有抓包看看到底什么个情况吗？")]),t._v(" "),a("h2",{attrs:{id:"_29-cookie-session区别-cookies-sessionstorage-和localstorage的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_29-cookie-session区别-cookies-sessionstorage-和localstorage的区别"}},[t._v("#")]),t._v(" 29 cookie session区别，"),a("strong",[t._v("cookies，sessionStorage 和localStorage的区别:")])]),t._v(" "),a("p",[a("strong",[t._v("cookie 和session 的区别：")])]),t._v(" "),a("p",[t._v("1、cookie数据存放在客户的浏览器上，"),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=session&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("session"),a("OutboundLink")],1),t._v("数据放在服务器上。\n2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗\n考虑到安全应当使用session。\n3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能\n考虑到减轻服务器性能方面，应当使用COOKIE。\n4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。\n5、所以个人建议：\n将登陆信息等重要信息存放为SESSION\n其他信息如果需要保留，可以放在COOKIE中")]),t._v(" "),a("p",[a("strong",[t._v("cookies，sessionStorage 和localStorage的区别:")])]),t._v(" "),a("ol",[a("li",[t._v("cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。")]),t._v(" "),a("li",[t._v("cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。")]),t._v(" "),a("li",[t._v("存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大")]),t._v(" "),a("li",[t._v("数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。")]),t._v(" "),a("li",[t._v("作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。Web Storage 的 api 接口使用更方便。")])]),t._v(" "),a("h2",{attrs:{id:"_30-session怎么保存、有多台服务器-sessionid-怎么找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30-session怎么保存、有多台服务器-sessionid-怎么找"}},[t._v("#")]),t._v(" 30 session怎么保存、有多台服务器，sessionid 怎么找")]),t._v(" "),a("h3",{attrs:{id:"session怎么保存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session怎么保存"}},[t._v("#")]),t._v(" session怎么保存")]),t._v(" "),a("p",[t._v("file - 将 Session 保存在 文件 中。")]),t._v(" "),a("p",[t._v("cookie - Session 保存在安全加密的 Cookie 中。")]),t._v(" "),a("p",[t._v("database - Session 保存在关系型数据库中。")]),t._v(" "),a("p",[t._v("memcached / redis - Sessions 保存在其中一个快速且基于缓存的存储系统中。")]),t._v(" "),a("p",[t._v("array - Sessions 保存在 PHP 数组中，不会被持久化。")]),t._v(" "),a("h3",{attrs:{id:"有多台服务器-sessionid-怎么找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有多台服务器-sessionid-怎么找"}},[t._v("#")]),t._v(" 有多台服务器，sessionid 怎么找")]),t._v(" "),a("h2",{attrs:{id:"_31-为什么cookie可以用来保存登录状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31-为什么cookie可以用来保存登录状态"}},[t._v("#")]),t._v(" 31 为什么cookie可以用来保存登录状态")]),t._v(" "),a("p",[t._v("cookie（客户端的状态保存机制）\n用户登录验证成功后，如果是使用 Cookie 记住登录状态，则客户端会将用户名等信息放在响应头的 Set-Cookie 属性中返回给服务器，之后的 HTTP 请求都会携带这个 Cookie ，实现记住登录。")]),t._v(" "),a("p",[t._v("session（服务端的状态保存机制）\n用户登录验证成功后，如果是 session 的话，则服务器会将用户名等信息存放在本地，再随机生成一个登录标识通过 Cookie 返回给浏览器，之后浏览器每次发送请求也会携带这个 Cookie，服务器收到后便通过这个标识得到已登录的用户信息。")]),t._v(" "),a("h2",{attrs:{id:"_32-http头部chunk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_32-http头部chunk"}},[t._v("#")]),t._v(" 32 http头部chunk")]),t._v(" "),a("h2",{attrs:{id:"_33-get-发一个-tcp-包-post-发两个-tcp-包-这种情况是一定的吗-什么情况下不是这样"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_33-get-发一个-tcp-包-post-发两个-tcp-包-这种情况是一定的吗-什么情况下不是这样"}},[t._v("#")]),t._v(" 33 get 发一个 tcp 包，post 发两个 tcp 包，这种情况是一定的吗，什么情况下不是这样")]),t._v(" "),a("h5",{attrs:{id:"一般来说-get产生一个tcp数据包-post产生两个tcp数据包。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一般来说-get产生一个tcp数据包-post产生两个tcp数据包。"}},[t._v("#")]),t._v(" 一般来说，GET产生一个TCP数据包；POST产生两个TCP数据包。")]),t._v(" "),a("p",[t._v("对于"),a("strong",[t._v("GET")]),t._v("方式的请求，浏览器会把"),a("strong",[t._v("http header和data一并发送出去")]),t._v("，服务器响应200（返回数据）；")]),t._v(" "),a("p",[t._v("而对于"),a("strong",[t._v("POST")]),t._v("，浏览器"),a("strong",[t._v("先发送header")]),t._v("，然后"),a("strong",[t._v("再发送data")]),t._v("，服务器响应200 ok（返回数据）；")]),t._v(" "),a("p",[t._v("所以，一般来说POST时间上消耗的要多一点")]),t._v(" "),a("h4",{attrs:{id:"并不是所有浏览器都会在post中发送两次包-firefox就只发送一次"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并不是所有浏览器都会在post中发送两次包-firefox就只发送一次"}},[t._v("#")]),t._v(" 并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次")]),t._v(" "),a("h2",{attrs:{id:"_34-post-如何把数据放到-url-中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_34-post-如何把数据放到-url-中"}},[t._v("#")]),t._v(" 34 post 如何把数据放到 url 中")]),t._v(" "),a("p",[t._v("使用占位符拼接参数")]),t._v(" "),a("p",[t._v("首先在一些情况下，往url上拼接请求参数。\n【?】开头"),a("br"),t._v("\n【&】开头"),a("br"),t._v("\n【=】参数值")]),t._v(" "),a("p",[t._v("1.如何直接往url上拼接请求参数")]),t._v(" "),a("p",[t._v("通过下面的例子可以看出，第一个参数需要以【?】开头， 然后是参数名，然后是【=】，然后是参数值。")]),t._v(" "),a("p",[t._v("第一个参数：需要以【?】开头，然后是参数名。\n"),a("code",[t._v("http://www.taohua.com?age=1")])]),t._v(" "),a("p",[t._v("下面是第二个参数的拼接开始则需要以【&】开头，然后是参数名，然后是【=】，然后是参数值。")]),t._v(" "),a("p",[a("strong",[t._v("第二个参数  ： 开始需要以【?】开头，然后是参数名，第二个以【&】开头，然后是参数名。")])]),t._v(" "),a("div",{staticClass:"language-perl line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-perl"}},[a("code",[t._v("http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v("www"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("桃花"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("box"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("&anme")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'桃花'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("&age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"_35-一个-http-的报文的头和-body-之间有什么分隔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_35-一个-http-的报文的头和-body-之间有什么分隔"}},[t._v("#")]),t._v(" 35 一个 http 的报文的头和 body 之间有什么分隔")]),t._v(" "),a("p",[t._v("HTTP协议规定，HTTP首部（headers）和HTTP主体之间是以一个空行分割的。")]),t._v(" "),a("p",[t._v("因为HTTP每一行（每一行是指一个头部字段）是以\\r\\n结束的，一个空行的\\r\\n，再加上最后一行的结束符\\r\\n，一起是\\r\\n\\r\\n，也就是说，当检测到\\r\\n\\r\\n四个字符时，下一个字符开始就是HTTP body的内容了。")]),t._v(" "),a("h2",{attrs:{id:"_36-重点-出现-304-的场景-通过什么协议头来确认-304-的响应头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_36-重点-出现-304-的场景-通过什么协议头来确认-304-的响应头"}},[t._v("#")]),t._v(" 36 (重点)出现 304 的场景，通过什么协议头来确认（304 的响应头）")]),t._v(" "),a("p",[t._v("如果客户端（浏览器）发送的是一个条件验证请求,则web服务器可能会返回304响应,这就表明了客户端中所请求资源的缓存仍然是有效的（"),a("strong",[t._v("经过协商缓存判断")]),t._v("）,也就是说该资源从上次缓存到现在没有被修改过，浏览器会自动识别并读取缓存中的文件来显示")]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("有关的响应头")]),t._v("\tEtag  Last-Modified")],1),t._v(" "),a("p",[t._v("有关的请求头 If-None-Match    If-modified-since")]),t._v(" "),a("h2",{attrs:{id:"_37-websocket原理-如何实现-和http报文结构有哪些不同-注意是结构不是特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_37-websocket原理-如何实现-和http报文结构有哪些不同-注意是结构不是特性"}},[t._v("#")]),t._v(" 37 websocket原理，如何实现，和http报文结构有哪些不同（注意是结构不是特性）")]),t._v(" "),a("h3",{attrs:{id:"什么是websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是websocket"}},[t._v("#")]),t._v(" 什么是websocket")]),t._v(" "),a("p",[t._v("WebSocket是HTML5一种新的协议，WebSocket是真正实现了全双工通信的服务器向客户端推的互联网技术，是一种在单个TCP连接上进行全双工通讯协议。websocket的最大特点是服务器可以主动向客户端推送信息，客户端也可以主动向服务器推送信息，实现平等双向对话。而且客户端和服务器之间只需要完成一次握手，就能直接创建持久性连接。")]),t._v(" "),a("h3",{attrs:{id:"原理-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原理-2"}},[t._v("#")]),t._v(" 原理")]),t._v(" "),a("h3",{attrs:{id:"实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),a("h3",{attrs:{id:"与http区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与http区别"}},[t._v("#")]),t._v(" 与http区别")]),t._v(" "),a("p",[t._v("http协议是短链接，因为请求之后，都会关闭连接，下次重新请求数据，需要再次打开连接。WebSocket协议是一种长连接，只需要通过一次请求来初始化链接，然后所有的请求和响应都是通过这个TCP链接进行通信。")]),t._v(" "),a("h2",{attrs:{id:"_38-cookie-localstorage-sessionstorage-使用和区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_38-cookie-localstorage-sessionstorage-使用和区别"}},[t._v("#")]),t._v(" 38 cookie，localStorage，sessionStorage 使用和区别")]),t._v(" "),a("ol",[a("li",[t._v("cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。")]),t._v(" "),a("li",[t._v("cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。")]),t._v(" "),a("li",[t._v("存储大小限制也不同，cookie数据不能超过4k，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大")]),t._v(" "),a("li",[t._v("数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。")]),t._v(" "),a("li",[t._v("作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。Web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者。Web Storage 的 api 接口使用更方便。")])]),t._v(" "),a("h2",{attrs:{id:"_39-ca认证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_39-ca认证"}},[t._v("#")]),t._v(" 39 ca认证")]),t._v(" "),a("p",[t._v("CA是认证中心的英文Certification Authority的缩写。它为电子商务环境中各个实体颁发"),a("strong",[t._v("数字证书")]),t._v("，以"),a("strong",[t._v("证明各实体身份的真实性")]),t._v("，并负责在交易中检验和管理证书；它是电子商务和网上银行交易的权威性、可信赖性及公正性的第三方机构。")]),t._v(" "),a("h2",{attrs:{id:"_40-wireshark能抓包到https请求的内容吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_40-wireshark能抓包到https请求的内容吗"}},[t._v("#")]),t._v(" 40 wireshark能抓包到https请求的内容吗")]),t._v(" "),a("h2",{attrs:{id:"_41-https怎么预防中间人攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_41-https怎么预防中间人攻击"}},[t._v("#")]),t._v(" 41 https怎么预防中间人攻击")]),t._v(" "),a("h3",{attrs:{id:"中间人攻击的几种形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中间人攻击的几种形式"}},[t._v("#")]),t._v(" "),a("strong",[t._v("中间人攻击的几种形式")])]),t._v(" "),a("ul",[a("li",[t._v("直接抓取报文获得明文信息")]),t._v(" "),a("li",[t._v("非法中间加密代理，窃取明文信息")]),t._v(" "),a("li",[t._v("留存密文，如果对称密钥泄露，解密历史报文")])]),t._v(" "),a("h3",{attrs:{id:"https怎么预防中间人攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https怎么预防中间人攻击"}},[t._v("#")]),t._v(" https怎么预防中间人攻击")]),t._v(" "),a("p",[t._v("HTTPS因为增加了CA证书，可以在会话前通过证书验证证明通信的彼此就是所声称的人，因此可以防范中间人攻击")]),t._v(" "),a("h2",{attrs:{id:"_42-http请求的过程中怎么知道数据已经发送完毕要断开连接-怎么断开"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_42-http请求的过程中怎么知道数据已经发送完毕要断开连接-怎么断开"}},[t._v("#")]),t._v(" 42 http请求的过程中怎么知道数据已经发送完毕要断开连接，怎么断开")]),t._v(" "),a("p",[t._v("终止一个连接则需四个分节，即四次挥手")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20220705165640913.png",alt:"image-20220705165640913"}})]),t._v(" "),a("p",[t._v("客户端: \t我不连了")]),t._v(" "),a("p",[t._v("服务端：   嗯，我知道了，我允许你断开，但是我等我现在发的东西发完，现在还不能断开  （此过程为ACK发送）")]),t._v(" "),a("p",[t._v("服务端：  东西我发完了，咱们断了吧   （此过程为FIN发送）")]),t._v(" "),a("p",[t._v("客户端：  我知晓了，再见")]),t._v(" "),a("h2",{attrs:{id:"_43-网络的七层模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_43-网络的七层模型"}},[t._v("#")]),t._v(" 43 网络的七层模型")]),t._v(" "),a("h2",{attrs:{id:"_44-get-post-head-这些请求方式有什么不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_44-get-post-head-这些请求方式有什么不同"}},[t._v("#")]),t._v(" 44 get post head 这些请求方式有什么不同")]),t._v(" "),a("ol",[a("li",[t._v("get和post的区别\n本质区别:get的作用是获取服务器资源,post的作用是向服务器提交数据，修改服务器资源；\nget传输的数据在url中，并不安全，而post传输的数据在正文中，更加安全；\nget请求传输数据有大小限制，而post没有大小限制，post因不同的浏览器和服务器而不同；\nget请求没有正文，post请求有正文；\n对参数的数据类型，get只接受大多数ASCII字符，而post没有限制；\nget请求会被浏览器主动缓存，而post不会被浏览器缓存；\nget提交数据只会产生一个tcp数据包，而post会产生两个tcp数据包,post会先给服务器发送一个报文通知服务器我要提交数据，服务器响应100(continue)之后，才会真正发送报文；")]),t._v(" "),a("li",[t._v("get和head的区别\nget请求获得的响应有正文，而head请求获得的响应中没有正文；")])]),t._v(" "),a("h2",{attrs:{id:"_45-了解轮询和websocket吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_45-了解轮询和websocket吗"}},[t._v("#")]),t._v(" 45 了解轮询和websocket吗？")]),t._v(" "),a("ul",[a("li",[t._v("轮询是传统的方式，不存在浏览器兼容性问题，定时的发送网络请求")]),t._v(" "),a("li",[t._v("轮询对客户端的电脑资源会造成额外的开销，如果页面中的定时器过多时不能实时获取最新的数据，获取数据会有延迟")]),t._v(" "),a("li",[t._v("websocket他对浏览器的版本有要求，低版本的浏览器不一定能用")]),t._v(" "),a("li",[t._v("websocket可以实时获取最新的数据，不会产生额外的开销。服务器有新的数据之后，会主动推送给客户端")]),t._v(" "),a("li",[t._v("轮询是定时的发送ajax请求，获取服务器的数据")]),t._v(" "),a("li",[t._v("在现阶段如果可以，建议使用websocket")])]),t._v(" "),a("h2",{attrs:{id:"_46-说一下websocket的四个阶段-websocket不能使用时要怎么处理、使用什么方式来代替websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_46-说一下websocket的四个阶段-websocket不能使用时要怎么处理、使用什么方式来代替websocket"}},[t._v("#")]),t._v(" 46 说一下websocket的四个阶段（websocket不能使用时要怎么处理、使用什么方式来代替websocket）")]),t._v(" "),a("p",[t._v("WebSocket端点的4个生命周期事件")]),t._v(" "),a("ul",[a("li",[t._v("打开事件： 此事件发生在端点建立新连接时并且在任何其他事件发生之前。")]),t._v(" "),a("li",[t._v("消息事件： 此事件接收 WebSocket 对话中另一端发送的消息。它可以发生在 WebSocket 端点接收了打开事件之后并且在接收关闭事件关闭连接之前的任意时刻。")]),t._v(" "),a("li",[t._v("错误事件： 此事件在 WebSocket 连接或者端点发生错误时产生。")]),t._v(" "),a("li",[t._v("关闭事件： 此事件表示 WebSocket 端点的连接目前正在部分地关闭，它可以由参与连接的任意一个端点发出。")])]),t._v(" "),a("p",[t._v("websocket不用使用时使用axios轮询来替换")]),t._v(" "),a("h2",{attrs:{id:"_47-http-状态码-204-301-302-304-400-401-403-404-含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_47-http-状态码-204-301-302-304-400-401-403-404-含义"}},[t._v("#")]),t._v(" 47 http 状态码 204 301 302 304 400 401 403 404 含义")]),t._v(" "),a("p",[t._v("http 状态码 204 （无内容） 服务器成功处理了请求，但没有返回任何内容")]),t._v(" "),a("p",[t._v("http 状态码 301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。")]),t._v(" "),a("p",[t._v("http 状态码 302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。")]),t._v(" "),a("p",[t._v("http 状态码 304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。")]),t._v(" "),a("p",[t._v("http 状态码 400 （错误请求） 服务器不理解请求的语法（一般为参数错误）。")]),t._v(" "),a("p",[t._v("http 状态码 401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。")]),t._v(" "),a("p",[t._v("http 状态码 403 （禁止） 服务器拒绝请求。（一般为客户端的用户权限不够）")]),t._v(" "),a("p",[t._v("http 状态码 404 （未找到） 服务器找不到请求的网页。")]),t._v(" "),a("h2",{attrs:{id:"_48-http2-0-做了哪些改进-3-0-呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_48-http2-0-做了哪些改进-3-0-呢"}},[t._v("#")]),t._v(" 48 http2.0 做了哪些改进 3.0 呢")]),t._v(" "),a("p",[a("strong",[t._v("http2.0 特性如下")])]),t._v(" "),a("ul",[a("li",[t._v("二进制分帧传输")]),t._v(" "),a("li",[t._v("多路复用")]),t._v(" "),a("li",[t._v("头部压缩")]),t._v(" "),a("li",[t._v("服务器推送")])]),t._v(" "),a("p",[a("strong",[t._v("Http3.0")]),t._v(" 相对于 Http2.0 是一种脱胎换骨的改变！")]),t._v(" "),a("p",[t._v("http 协议是应用层协议，都是建立在传输层之上的。我们也都知道传输层上面不只有 TCP 协议，还有另外一个强大的协议 "),a("strong",[t._v("UDP 协议")]),t._v("，2.0 和 1.0 都是基于 TCP 的，因此都会有 TCP 带来的硬伤以及局限性。而 Http3.0 则是建立在 UDP 的基础上。所以其与 Http2.0 之间有质的不同。")]),t._v(" "),a("p",[a("strong",[t._v("http3.0 特性如下")])]),t._v(" "),a("ul",[a("li",[t._v("连接迁移")]),t._v(" "),a("li",[t._v("无队头阻塞")]),t._v(" "),a("li",[t._v("自定义的拥塞控制")]),t._v(" "),a("li",[t._v("前向安全和前向纠错")])]),t._v(" "),a("blockquote",[a("p",[t._v("建议大家详细看看这篇文章"),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fblog.csdn.net%2Fm0_60360320%2Farticle%2Fdetails%2F119812431",target:"_blank",rel:"noopener noreferrer"}},[t._v("Http2.0 的一些思考以及 Http3.0 的优势"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"_49-重点-http1-0-http1-1-http2-0-http3-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_49-重点-http1-0-http1-1-http2-0-http3-0"}},[t._v("#")]),t._v(" 49 (重点)http1.0 http1.1 http2.0 http3.0")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/d812a77cebea4036befa959deaf1cae8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp",alt:"img"}})]),t._v(" "),a("p",[t._v("一文总结http1.0，http1.1，http2，http3，面试强心剂，https://juejin.cn/post/7001510315514937375")]),t._v(" "),a("h3",{attrs:{id:"http1-0-请求是单线处理的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http1-0-请求是单线处理的"}},[t._v("#")]),t._v(" "),a("font",{attrs:{color:"red",size:"5"}},[t._v("http1.0 (请求是单线处理的）")])],1),t._v(" "),a("p",[t._v("HTTP1.0最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上,是一种"),a("strong",[t._v("无状态、无连接")]),t._v("的应用层协议，几年后被HTTP1.1代替并广泛使用")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("默认是：一次请求-响应，建立一个连接，用完了关闭，每次请求都要建立一次连接，想要建立长连接，则使用keep-alive参数")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("长连接")]),t._v("：建立一个连接，所有请求串行起来，客户端接收到前一个请求的服务端响应后，后一个请求发出（可能造成队头阻塞（head of line blocking））")])])]),t._v(" "),a("h3",{attrs:{id:"http1-1-请求是单线处理的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http1-1-请求是单线处理的"}},[t._v("#")]),t._v(" "),a("font",{attrs:{color:"red",size:"5"}},[t._v("http1.1：（请求是单线处理的）")])],1),t._v(" "),a("ul",[a("li",[a("p",[t._v("http1.1基于"),a("strong",[t._v("文本解析")]),t._v(",把所有请求和响应作为纯文本")])]),t._v(" "),a("li",[a("p",[t._v("http1.1加入了**"),a("font",{attrs:{color:"red",size:"3"}},[t._v("缓存处理（")]),t._v("强缓存和协商缓存）**")],1)]),t._v(" "),a("li",[a("p",[t._v("http1.1拥有长连接，并支持请求"),a("strong",[t._v("管道化")]),t._v("（"),a("code",[t._v("pipelining")]),t._v("），")])]),t._v(" "),a("li",[a("p",[t._v("http1.1流控制基于"),a("font",{attrs:{color:"red",size:"3"}},[a("strong",[t._v("tcp连接")])]),t._v("。当连接建立时，两端通过系统默认机制建立缓冲区。并通过ack报文来通知对方接收窗口大小，因为http1.1 依靠传输层来避免流溢出，每个tcp连接需要一个独立的流控制机制")],1)])]),t._v(" "),a("h4",{attrs:{id:"缓存处理-强缓存和协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存处理-强缓存和协商缓存"}},[t._v("#")]),t._v(" "),a("strong",[t._v("缓存处理（强缓存和协商缓存）")])]),t._v(" "),a("p",[t._v("浏览器缓存能优化性能，而浏览器缓存分为"),a("strong",[t._v("强缓存")]),t._v("和"),a("strong",[t._v("协商缓存")]),t._v("，都是从客户端读取缓存 "),a("strong",[t._v("强缓存")])]),t._v(" "),a("p",[t._v("强缓存不发送请求，直接读取资源，可以获得返回200的状态码")]),t._v(" "),a("p",[t._v("利用http头中的"),a("code",[t._v("Expires")]),t._v("和"),a("code",[t._v("Cache-Control")]),t._v("两个字段来控制，都用来表示资源的缓存时间，Expires能设置失效时间，而Cache-Control能做到更多选项更细致，如果同时设置的话，其优先级"),a("strong",[t._v("高于")]),t._v("Expires "),a("strong",[t._v("协商缓存")])]),t._v(" "),a("p",[t._v("通过服务器来确定缓存资源是否可用，通过request header判断是否命中请求，命中后返回304状态码，并返回新的request header通知客户端从缓存里取")]),t._v(" "),a("p",[t._v("普通刷新会启用弱缓存，忽略强缓存。只有在地址栏或收藏夹输入网址、通过链接引用资源等情况下，浏览器才会启用强缓存")]),t._v(" "),a("p",[t._v("如果时间过期，则向服务器发送header带有If-None-Match和If-Modified-Since的请求，回到1")]),t._v(" "),a("h4",{attrs:{id:"连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接"}},[t._v("#")]),t._v(" 连接")]),t._v(" "),a("p",[t._v("默认：【长连接】一个连接，处理多个请求。使用了Pipelining（管道化）的特性")]),t._v(" "),a("h4",{attrs:{id:"pipelining-管道化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pipelining-管道化"}},[t._v("#")]),t._v(" Pipelining（管道化）")]),t._v(" "),a("p",[a("strong",[t._v("Pipelining（管道化）")]),t._v("：属于优化了长链接，建立一个连接，所有请求串行起来，第一条发往服务器的时候，第二、三条也开始发送，但管道化要求【服务器端】按照发送的顺序返回响应！！！")]),t._v(" "),a("ul",[a("li",[t._v("只有GET和HEAD请求才能管道化")]),t._v(" "),a("li",[t._v("按序返回响应是因为，http请求和响应没有序号标识，无法关联")])]),t._v(" "),a("h3",{attrs:{id:"http2-0-请求并行处理-spdy协议-还是在tcp基础上的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2-0-请求并行处理-spdy协议-还是在tcp基础上的"}},[t._v("#")]),t._v(" "),a("font",{attrs:{color:"red",size:"5"}},[t._v("http2.0：（请求并行处理）SPDY协议（还是在tcp基础上的）")])],1),t._v(" "),a("ul",[a("li",[t._v("http2相比于http1.1，"),a("strong",[t._v("性能")]),t._v("大幅度提升")]),t._v(" "),a("li",[t._v("http2通过一个连接来"),a("strong",[t._v("多路复用")])]),t._v(" "),a("li",[t._v("http2拥有"),a("strong",[t._v("头部压缩")])]),t._v(" "),a("li",[t._v("http2拥有"),a("strong",[t._v("新的二进制格式")]),t._v("，使用二进制框架层把所有消息封装成二进制，且仍然保持http语法")]),t._v(" "),a("li",[t._v("http2允许客户端和服务器端实现他们自己的流控制机制，而不是依赖传输层,两端在传输层交换可用的缓冲区大小，来让他们在多路复用流上设置自己的接收窗口")]),t._v(" "),a("li",[t._v("http2让服务器可以将响应主动“"),a("strong",[t._v("推送")]),t._v("”到客户端缓存中")]),t._v(" "),a("li",[a("strong",[t._v("http2使用的是报文通信，http1使用的是文本的形式")])])]),t._v(" "),a("p",[t._v("上面太冗余了，总结下")]),t._v(" "),a("ul",[a("li",[t._v("二进制分帧:"),a("font",{attrs:{color:"red",size:"3"}},[t._v("http2.0引入二进制数据帧和流的概念（数据帧对每一个数据进行标识，可以不按顺序传输，从而实现并行）")])],1),t._v(" "),a("li",[a("font",{attrs:{color:"red",size:"3"}},[t._v("多路复用")]),t._v(":同一个域名访问多个文件的请求也可以复用一个tcp连接，且多个请求可以被并行处理")],1),t._v(" "),a("li",[a("font",{attrs:{color:"red",size:"3"}},[t._v("头部压缩")]),t._v(":")],1),t._v(" "),a("li",[t._v("服务端推送")])]),t._v(" "),a("h4",{attrs:{id:"htpp2头部压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#htpp2头部压缩"}},[t._v("#")]),t._v(" htpp2头部压缩")]),t._v(" "),a("p",[t._v("http2头部压缩又称为"),a("strong",[t._v("HAPCK")]),t._v("，"),a("strong",[t._v("设计简单而灵活")]),t._v("，是因为HPACK格式有意地"),a("code",[t._v("简单")]),t._v("且"),a("code",[t._v("不灵活")]),t._v("能降低由于实现错误而导致的互操作性或安全问题的风险")]),t._v(" "),a("p",[a("font",{attrs:{color:"red",size:"3"}},[t._v("http1.1没有头部压缩，随着请求增加，冗余头部字段会不必要地占用带宽，从而显着增加延迟，")]),t._v("而头部压缩可消除冗余报头字段，限制已知安全攻击的漏洞，并且在受限环境中使用有限的内存要求")],1),t._v(" "),a("h4",{attrs:{id:"http2多路复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2多路复用"}},[t._v("#")]),t._v(" http2多路复用")]),t._v(" "),a("p",[t._v("http 性能优化的关键并不在于高带宽，而是低延迟")]),t._v(" "),a("p",[t._v("tcp 连接会随着时间进行自我「调谐」，起初会限制连接的最大速度，如果数据成功传输，会随着时间的推移提高传输的速度,这种调谐则被称为 tcp 慢启动,由于这种原因，让原本就具有突发性和短时性的 http 连接变的十分低效")]),t._v(" "),a("p",[t._v("http/2 通过让所有数据流共用同一个连接，可以更有效地使用 tcp 连接，让高带宽也能真正的服务于 http 的性能提升。而http1.1存在低性能的线头阻塞，一旦有一个请求超时，便会出现阻塞等待的情况")]),t._v(" "),a("p",[a("strong",[t._v("重点：")]),a("font",{attrs:{color:"red",size:"3"}},[t._v("http2.0多路复用和长链接的区别？？？")])],1),t._v(" "),a("p",[t._v("长连接：同一个域名访问同一个文件的多个请求都可以复用一个tcp连接（不用像1.0一样 每次请求都需要重新建立连接）\n依然存在的问题："),a("font",{attrs:{color:"red",size:"3"}},[t._v("1.多个请求只能被串行处理")]),t._v("（数据基于文本，只能按顺序传输）；2.访问多个不同的文件依然会建立多个请求。")],1),t._v(" "),a("p",[t._v("多路复用："),a("font",{attrs:{color:"red",size:"3"}},[t._v("同一个域名访问多个文件的请求也可以复用一个tcp连接，且多个请求可以被并行处理。")]),t._v("\n并行实现原理："),a("font",{attrs:{color:"red",size:"3"}},[t._v("http2.0引入二进制数据帧和流的概念（数据帧对每一个数据进行标识，可以不按顺序传输，从而实现并行）")])],1),t._v(" "),a("h4",{attrs:{id:"连接-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接-2"}},[t._v("#")]),t._v(" 连接")]),t._v(" "),a("p",[t._v("一个连接，处理多个请求。新增【二进制分帧层】，多路复用（可能会导致关键字被阻塞），"),a("strong",[t._v("某个请求耗时严重不会影响其他请求")]),t._v("（但丢包的话所有的都要重传，也会数据阻塞）")]),t._v(" "),a("p",[a("strong",[t._v("二进制分帧层")]),t._v("：**转化成：流、消息和帧，每个数据流以消息的形式发送，而消息由一或多个帧组成。**这些帧可以乱序发送，然后再根据每个帧头部的流标识符（Stream_id）重新封装，优先级高的数据流会被服务器优先处理和返回客户端")]),t._v(" "),a("p",[a("strong",[t._v("头部压缩")]),t._v("：通信双方cache一份header fields表，避免重复传输，减少了需要传输的大小")]),t._v(" "),a("h3",{attrs:{id:"http3-0-请求并行处理-quic协议-udp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http3-0-请求并行处理-quic协议-udp"}},[t._v("#")]),t._v(" "),a("font",{attrs:{color:"red",size:"5"}},[t._v("http3.0：（请求并行处理）QUIC协议（udp）")])],1),t._v(" "),a("p",[t._v("QUIC产生的原因，主要是由于TCP的限制所引起的。连接是一种非常宝贵的资源，创建、销毁，以及其上的传输，都是非常耗时的。之前说了http2，那么http3就是为了解决http2相关问题而诞生，它基于一个新的传输层协议"),a("strong",[t._v("QUIC")]),t._v("，而http3就是建立一个在QUIC上运行的HTTP新规范，而"),a("strong",[t._v("http3之前的版本都是基于TCP")]),t._v("，QUIC就是为了替代TCP，解决TCP的一些缺陷")]),t._v(" "),a("h4",{attrs:{id:"tcp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[t._v("#")]),t._v(" tcp")]),t._v(" "),a("p",[a("strong",[t._v("不支持流级复用")]),t._v("，TCP会将所有对象序列化在同一个流中，因此，它不知道TCP段的对象级分区，无法在同一个流中复用数据包")]),t._v(" "),a("p",[a("strong",[t._v("会产生冗余通信")]),t._v("，"),a("font",{attrs:{color:"red",size:"3"}},[t._v("tcp三次连接握手会有冗余的消息交换序列")])],1),t._v(" "),a("p",[a("strong",[t._v("可能会间歇性地挂起数据传输")]),t._v("，tcp中有个因为序列顺序处理丢失的问题的缺陷称为行头阻塞")]),t._v(" "),a("h4",{attrs:{id:"quic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quic"}},[t._v("#")]),t._v(" QUIC")]),t._v(" "),a("ol",[a("li",[t._v("同样拥有"),a("strong",[t._v("头部压缩")]),t._v("，并优化了对乱序发送的支持，也优化了压缩率")]),t._v(" "),a("li",[t._v("放弃tcp，通过"),a("strong",[t._v("udp")]),t._v("建立，提高了连接建立的速度，降低了延迟")]),t._v(" "),a("li",[t._v("tcp本身是无法解决"),a("strong",[t._v("队头拥塞")]),t._v("，quic则"),a("strong",[t._v("解决")]),t._v("了这个问题")]),t._v(" "),a("li",[t._v("Connection ID使得http3支持"),a("strong",[t._v("连接迁移")]),t._v("以及NAT的重绑定")])]),t._v(" "),a("h4",{attrs:{id:"连接-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接-3"}},[t._v("#")]),t._v(" 连接")]),t._v(" "),a("p",[t._v("缓存当前会话的上下文，下次恢复会话的时候，只需要将之前的缓存传递给服务器，验证通过，就可以进行传输了。\n改善了多路复用，（一个连接上的多个stream之间没有依赖，丢包的话只需要重发丢掉的包就系行了）")]),t._v(" "),a("p",[a("strong",[t._v("同域名下浏览器连接的最大并发数是多少")])]),t._v(" "),a("p",[t._v("不同浏览器（版本、浏览器）、不同的http协议不同，最常见的是4、6个，但是也可以浏览器自行更改")]),t._v(" "),a("h4",{attrs:{id:"重点-http3为什么安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重点-http3为什么安全"}},[t._v("#")]),t._v(" (重点)http3为什么安全")]),t._v(" "),a("p",[a("code",[t._v("HTTP/3")]),t._v("基于UDP，是非常靠谱的。它不仅实现了可靠性传输，而且能够获得较大的性能提升。")]),t._v(" "),a("p",[t._v("QUIC能够实现TCP协议的所有功能性需求，并集成了TLS，功能上赶超了TCP")]),t._v(" "),a("h3",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222104214108.png",alt:"image-20230222104214108"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222104333463.png",alt:"image-20230222104333463"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222104412848.png",alt:"image-20230222104412848"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222104557682.png",alt:"image-20230222104557682"}})]),t._v(" "),a("h2",{attrs:{id:"_50-什么是restful-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_50-什么是restful-api"}},[t._v("#")]),t._v(" 50 什么是restful api")]),t._v(" "),a("p",[t._v("REST 全称：REpresentational State Transfer，英文翻译过来就是“表现层状态转化”。如果单看这个概念，估计大家很难理解。那下面就让我来用一句话通俗解释一下。 **RESTful:用URL定位资源、用HTTP动词（GET、POST、PUT、DELETE)描述操作。**只要记住这句话也就不难理解了。")]),t._v(" "),a("p",[a("strong",[t._v("RESTful API就是REST风格的API，即rest是一种架构风格，跟编程语言无关，跟平台无关，采用HTTP做传输协议")]),t._v("。")]),t._v(" "),a("p",[t._v("在当今的互联网应用的前端展示媒介很丰富。有手机、有平板电脑还有PC以及其他的展示媒介，从而你的系统的客户端要支持浏览器、Android、ios等。此时你肯定不会单独为每个客户端写一个后台系统，而是写一个后台系统提供rest风格的URI，这三个客户端都请求该同一个后台系统。那么这些前端接收到的用户请求统一由一个后台来处理并返回给不同的前端肯定是最科学和最经济的方式如（图1-1）。"),a("strong",[t._v("RESTful API就是一套协议来规范多种形式的前端和同一个后台的交互方式。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/20181225154935703.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"_51-http请求中option主要是干什么的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_51-http请求中option主要是干什么的"}},[t._v("#")]),t._v(" 51 http请求中option主要是干什么的")]),t._v(" "),a("h2",{attrs:{id:"_52-socket-和-websocket区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_52-socket-和-websocket区别"}},[t._v("#")]),t._v(" 52 socket 和 WebSocket区别")]),t._v(" "),a("p",[t._v("一篇文章彻底搞懂socket https://blog.csdn.net/qq_26226375/article/details/124079732")]),t._v(" "),a("p",[t._v("https://blog.csdn.net/cst522445906/article/details/117199630")]),t._v(" "),a("p",[t._v("网络中的 Socket 并不是什么协议，而是为了使用 TCP，UDP 而抽象出来的一层  API，它是位于应用层和传输层之间的一个抽象层。Socket 是对 TCP/IP 的封装；HTTP  是轿车，提供了封装或者显示数据的具体形式；Socket 是发动机，提供了网络通信的能力")]),t._v(" "),a("p",[t._v("连接wifi先建立网络层连接--然后在传输层选择socekt驱动通信（局域网通信）")]),t._v(" "),a("p",[t._v("连接wifi文档")]),t._v(" "),a("p",[t._v("https://juejin.cn/post/6844904036110434318#heading-4")]),t._v(" "),a("p",[t._v("https://developers.weixin.qq.com/miniprogram/dev/api/device/wifi/wx.stopWifi.html")]),t._v(" "),a("p",[t._v("小程序wifi 连接后webscoket通信")]),t._v(" "),a("p",[t._v("https://developers.weixin.qq.com/community/develop/article/doc/000c2a5e294e4816df88b278a5d813")]),t._v(" "),a("p",[t._v("内网一般指局域网，外网一般指广域网。内网的覆盖范围一般是方圆几千米之内，具备安装便捷、成本节约、扩展方便等特点。外网通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里。")]),t._v(" "),a("p",[t._v("外网就是你现在用的移动数据，联网才能进微信小程序，如果是局域网的话打不开小程序，他是说先打开小程序再试试websocket能不能用")]),t._v(" "),a("p",[t._v("微信小程序局域网通信api")]),t._v(" "),a("p",[t._v("https://developers.weixin.qq.com/miniprogram/dev/framework/ability/mDNS.html")]),t._v(" "),a("p",[t._v("电脑生成wifi二维码")]),t._v(" "),a("p",[t._v("http://old.wwei.cn/qrcode-index-wifi.html")]),t._v(" "),a("p",[t._v("小程序tcp通信支持")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/0",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"_53-小程序局域网tcp通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_53-小程序局域网tcp通信"}},[t._v("#")]),t._v(" 53 小程序局域网tcp通信")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/03fd662ed16e4ded8507a51fff89ac72.png",alt:"img"}})]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleTcp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("wx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("canIUse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"createTCPSocket"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tcp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" wx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createTCPSocket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    tcp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("address")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'192.168.137.1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60100")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    tcp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onConnect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"onConnect"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        tcp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello, how are you'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    tcp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" remoteInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" localInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"onMessage"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("remoteInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("localInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    tcp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onError")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// setTimeout(function() {")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \t// 3s后，关闭socket")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \ttcp.close(() => {")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// \t\tconsole.log("close")')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \t})")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }, 3000)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20220817234151356.png",alt:"image-20220817234151356"}})]),t._v(" "),a("p",[t._v("局域网肯定是192.168开头的才能进行通信")]),t._v(" "),a("p",[t._v("同时小程序端获取到服务端传过来的数据是一个ArrayBuffer类型，需要转换为字符串")]),t._v(" "),a("p",[t._v("ArrayBuffer转为字符串，或者字符串转为ArrayBuffer，有一个前提，即字符串的编码方法是确定的。假定字符串采用UTF-16编码（JavaScript的内部编码方式），可以自己编写转换函数。")]),t._v(" "),a("p",[t._v("由于 ArrayBuffer 实际上是一个字节数组，因此这种转换要求两端就如何将 String 中的字符表示为字节达成一致。 您之前可能已经看过这个“协议”：它是字符串的字符编码（通常的“协议条款”是，例如，Unicode UTF-16 和 iso8859-1）。 因此，"),a("strong",[t._v("假设您和对方已就 UTF-16 编码达成一致")]),t._v("，则转换代码可能类似于：")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("注意")]),t._v(":Uint16Array的用法。这是一个ArrayBuffer视图，它将数组缓冲区的字节对齐为16位元素。它本身不处理字符编码，字符编码是由String.fromCharCode和str.charCodeAt作为"),a("a",{attrs:{href:"https://so.csdn.net/so/search?q=Unicode&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unicode"),a("OutboundLink")],1),t._v("处理的。")])]),t._v(" "),a("p",[t._v("具体可以看这篇文章: https://blog.csdn.net/u014436243/article/details/119995339")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ArrayBuffer转为字符串，参数为ArrayBuffer对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ab2str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("buf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fromCharCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint16Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串转为ArrayBuffer对象，参数为字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("str2ab")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" buf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每个字符占用2个字节")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bufView "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint16Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" strLen"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("strLen"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nbufView"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charCodeAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("p",[t._v("如果双方就UTF-8编码达成一致，则ArrayBuffer转子字符串又变为")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ab2str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("buf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n`"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fromCharCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"_54-http转换成ws时状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_54-http转换成ws时状态码"}},[t._v("#")]),t._v(" 54 http转换成ws时状态码")]),t._v(" "),a("h2",{attrs:{id:"_55-ajax-http线程和网络进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_55-ajax-http线程和网络进程"}},[t._v("#")]),t._v(" 55 ajax+http线程和网络进程")]),t._v(" "),a("h2",{attrs:{id:"_56-重点-什么是http-only-防止xss攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_56-重点-什么是http-only-防止xss攻击"}},[t._v("#")]),t._v(" 56 (重点)什么是http-only,防止XSS攻击")]),t._v(" "),a("p",[t._v("敲黑板：http-only能够有效地防止XSS攻击。")]),t._v(" "),a("p",[t._v("1、什么是http-only？\n"),a("strong",[t._v("HttpOnly是包含在http响应头Set-Cookie里面的一个附加的flag，所以它是后端服务器对cookie设置的一个附加的属性")]),t._v("，在生成cookie时使用HttpOnly标志有助于减轻客户端脚本访问受保护cookie的风险（如果浏览器支持的话）\n"),a("strong",[t._v("通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击。")])]),t._v(" "),a("p",[t._v("2、这个是干什么用的？其他相关点!\n大多数XSS攻击都是针对会话cookie的盗窃。后端服务器可以通过在其创建的cookie上设置HttpOnly标志来帮助缓解此问题，这表明该cookie在客户端上不可访问。\n如果支持HttpOnly的浏览器检测到包含HttpOnly标志的cookie，并且客户端脚本代码尝试读取该cookie，则浏览器将返回一个空字符串作为结果。这会通过阻止恶意代码（通常是XSS）将数据发送到攻击者的网站来使攻击失败。")]),t._v(" "),a("h2",{attrs:{id:"_57-重点-什么是same-site-防止csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_57-重点-什么是same-site-防止csrf"}},[t._v("#")]),t._v(" 57 (重点)什么是same-site,防止CSRF")]),t._v(" "),a("p",[t._v("防止CSRF攻击的办法已经有上面的预防措施。为了从源头上解决这个问题，Google起草了一份草案来改进HTTP协议，"),a("strong",[a("font",{attrs:{color:"red",size:"3"}},[t._v("那就是为Set-Cookie响应头新增Samesite属性，它用来标明这个 Cookie是个“同站 Cookie”，同站Cookie只能作为第一方Cookie，不能作为第三方Cookie，Samesite  有两个属性值，分别是 Strict 和 Lax")])],1),t._v("，下面分别讲解：")]),t._v(" "),a("ul",[a("li",[t._v("None: 任何情况下都会向第三方网站请求发送 Cookie")]),t._v(" "),a("li",[t._v("Lax: 只有导航到第三方网站的 Get 链接会发送 Cookie，跨域的图片、iframe、form 表单都不会发送 Cookie")]),t._v(" "),a("li",[t._v("Strict: 任何情况下都不会向第三方网站请求发送 Cookie")])]),t._v(" "),a("h2",{attrs:{id:"_58-重点-cors跨域的基本字段信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_58-重点-cors跨域的基本字段信息"}},[t._v("#")]),t._v(" 58 (重点)cors跨域的基本字段信息")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//允许的请求源")]),t._v("\nres"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("header")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Origin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:8070"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//允许携带cookie，设置这个的话上一条的设置不能为'*'")]),t._v("\n   res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("header")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Allow-Credentials'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'true'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//允许携带cookie，设置这个的话上一条的设置不能为'*'")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//允许的header类型")]),t._v("\n   res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("header")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Headers"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Origin, X-Requested-With, Content-Type, Accept, Token"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//跨域允许的请求方式")]),t._v("\n   res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("header")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Access-Control-Allow-Methods"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DELETE,PUT,POST,GET,OPTIONS"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//响应的信息格式  ")]),t._v("\nres"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("header")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/json'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h2",{attrs:{id:"_59-重点-http-headers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_59-重点-http-headers"}},[t._v("#")]),t._v(" 59 (重点)http headers")]),t._v(" "),a("h3",{attrs:{id:"request-headers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#request-headers"}},[t._v("#")]),t._v(" request headers")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230219104510943.png",alt:"image-20230219104510943"}}),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230219104634337.png",alt:"image-20230219104634337"}}),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230219104803151.png",alt:"image-20230219104803151"}}),t._v(" "),a("h3",{attrs:{id:"response-headers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#response-headers"}},[t._v("#")]),t._v(" response headers")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230219104859988.png",alt:"image-20230219104859988"}}),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230219105151099.png",alt:"image-20230219105151099"}}),t._v(" "),a("h3",{attrs:{id:"自定义header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义header"}},[t._v("#")]),t._v(" 自定义header")]),t._v(" "),a("p",[t._v("可能服务端自己要求设置某个请求头才能请求资源")]),t._v(" "),a("h3",{attrs:{id:"缓存相关的headers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存相关的headers"}},[t._v("#")]),t._v(" 缓存相关的headers")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230219105450882.png",alt:"image-20230219105450882"}}),t._v(" "),a("h2",{attrs:{id:"_60-重点-cookie和token的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_60-重点-cookie和token的区别"}},[t._v("#")]),t._v(" 60 （重点）cookie和token的区别")]),t._v(" "),a("h3",{attrs:{id:"cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[t._v("#")]),t._v(" cookie")]),t._v(" "),a("p",[t._v("好像是可以设置跨域共享的")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222100127632.png",alt:"image-20230222100127632"}}),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222100356815.png",alt:"image-20230222100356815"}}),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222100518458.png",alt:"image-20230222100518458"}}),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222100857417.png",alt:"image-20230222100857417"}}),t._v(" "),a("h3",{attrs:{id:"token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[t._v("#")]),t._v(" token")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222101108624.png",alt:"image-20230222101108624"}}),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222101315510.png",alt:"image-20230222101315510"}}),t._v(" "),a("h3",{attrs:{id:"区别-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别-2"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222101503296.png",alt:"image-20230222101503296"}})]),t._v(" "),a("h3",{attrs:{id:"session和jwt对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session和jwt对比"}},[t._v("#")]),t._v(" session和jwt对比")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222101701366.png",alt:"image-20230222101701366"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222101842673.png",alt:"image-20230222101842673"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222101936089.png",alt:"image-20230222101936089"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222102044180.png",alt:"image-20230222102044180"}})]),t._v(" "),a("h4",{attrs:{id:"答案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#答案"}},[t._v("#")]),t._v(" 答案")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222102152988.png",alt:"image-20230222102152988"}})]),t._v(" "),a("h2",{attrs:{id:"_61-重点-如何实现sso单点登陆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_61-重点-如何实现sso单点登陆"}},[t._v("#")]),t._v(" 61（重点）如何实现SSO单点登陆")]),t._v(" "),a("h3",{attrs:{id:"基于cookie实现单点登陆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于cookie实现单点登陆"}},[t._v("#")]),t._v(" 基于cookie实现单点登陆")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222102421023.png",alt:"image-20230222102421023"}})]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222102515785.png",alt:"image-20230222102515785"}}),t._v(" "),a("h3",{attrs:{id:"sso"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sso"}},[t._v("#")]),t._v(" SSO")]),t._v(" "),a("p",[t._v("28 6.8")]),t._v(" "),a("h3",{attrs:{id:"oauth-2-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oauth-2-0"}},[t._v("#")]),t._v(" OAuth 2.0")]),t._v(" "),a("p",[t._v("不让用户输入用户名密码这些，而是使用第三方登陆，如微信扫码登陆这些")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222103439888.png",alt:"image-20230222103439888"}})]),t._v(" "),a("h3",{attrs:{id:"答案-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#答案-2"}},[t._v("#")]),t._v(" 答案")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222103626460.png",alt:"image-20230222103626460"}})]),t._v(" "),a("h2",{attrs:{id:"_62-重点-http协议和udp协议有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_62-重点-http协议和udp协议有什么区别"}},[t._v("#")]),t._v(" 62（重点）http协议和udp协议有什么区别")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222103735827.png",alt:"image-20230222103735827"}}),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222103810889.png",alt:"image-20230222103810889"}}),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222103859766.png",alt:"image-20230222103859766"}}),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222103938750.png",alt:"image-20230222103938750"}})]),t._v(" "),a("h3",{attrs:{id:"答案-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#答案-3"}},[t._v("#")]),t._v(" 答案")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222104002862.png",alt:"image-20230222104002862"}}),t._v(" "),a("h2",{attrs:{id:"_63-重点-什么是https中间人攻击-如何预防"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_63-重点-什么是https中间人攻击-如何预防"}},[t._v("#")]),t._v(" 63 （重点）什么是HTTPS中间人攻击，如何预防")]),t._v(" "),a("p",[a("strong",[t._v("考察对称加密和非对称加密")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222105017853.png",alt:"image-20230222105017853"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222105031019.png",alt:"image-20230222105031019"}})]),t._v(" "),a("h2",{attrs:{id:"_64-重点-websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_64-重点-websocket"}},[t._v("#")]),t._v(" 64 （重点）webSocket")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222124215920.png",alt:"image-20230222124215920"}}),t._v(" "),a("h3",{attrs:{id:"连接过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接过程"}},[t._v("#")]),t._v(" 连接过程")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222124313395.png",alt:"image-20230222124313395"}})]),t._v(" "),a("h3",{attrs:{id:"和http区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和http区别"}},[t._v("#")]),t._v(" 和HTTP区别")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222124415206.png",alt:"image-20230222124415206"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222124520803.png",alt:"image-20230222124520803"}})]),t._v(" "),a("h3",{attrs:{id:"和http长轮询区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和http长轮询区别"}},[t._v("#")]),t._v(" 和HTTP长轮询区别")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20230222124907057.png",alt:"image-20230222124907057"}})])}),[],!1,null,null,null);s.default=r.exports}}]);