(window.webpackJsonp=window.webpackJsonp||[]).push([[440],{846:function(t,v,_){"use strict";_.r(v);var a=_(58),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"二叉树理论基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉树理论基础"}},[t._v("#")]),t._v(" 二叉树理论基础")]),t._v(" "),_("h2",{attrs:{id:"题目分类大纲"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#题目分类大纲"}},[t._v("#")]),t._v(" 题目分类大纲")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/20210219190809451.png",alt:"二叉树大纲"}})]),t._v(" "),_("h2",{attrs:{id:"二叉树的种类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的种类"}},[t._v("#")]),t._v(" 二叉树的种类")]),t._v(" "),_("p",[t._v("在我们解题过程中二叉树有两种主要的形式：满二叉树和完全二叉树。")]),t._v(" "),_("h3",{attrs:{id:"满二叉树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#满二叉树"}},[t._v("#")]),t._v(" 满二叉树")]),t._v(" "),_("p",[t._v("满二叉树：如果一棵二叉树只有度为0的结点和度为2的结点，并且度为0的结点在同一层上，则这棵二叉树为满二叉树。")]),t._v(" "),_("p",[t._v("如图所示：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/20200806185805576.png",alt:"img"}})]),t._v(" "),_("p",[t._v("这棵二叉树为满二叉树，也可以说深度为k，有2^k-1个节点的二叉树。")]),t._v(" "),_("h3",{attrs:{id:"完全二叉树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#完全二叉树"}},[t._v("#")]),t._v(" 完全二叉树")]),t._v(" "),_("p",[t._v("什么是完全二叉树？")]),t._v(" "),_("p",[t._v("完全二叉树的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最右边的若干位置。若最底层为第 h 层，则该层包含 1~ 2^(h-1)  个节点。")]),t._v(" "),_("p",[_("strong",[t._v("大家要自己看完全二叉树的定义，很多同学对完全二叉树其实不是真正的懂了。")])]),t._v(" "),_("p",[t._v("举一个典型的例子如题：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20220518205018079.png",alt:"image-20220518205018079"}})]),t._v(" "),_("p",[t._v("相信不少同学最后一个二叉树是不是完全二叉树都中招了。")]),t._v(" "),_("h3",{attrs:{id:"二叉搜索树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树"}},[t._v("#")]),t._v(" 二叉搜索树")]),t._v(" "),_("p",[t._v("前面介绍的树，都没有数值的，而二叉搜索树是有数值的了，"),_("strong",[t._v("二叉搜索树是一个有序树")]),t._v("。")]),t._v(" "),_("ul",[_("li",[t._v("若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；")]),t._v(" "),_("li",[t._v("若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；")]),t._v(" "),_("li",[t._v("它的左、右子树也分别为二叉排序树")])]),t._v(" "),_("p",[t._v("下面这两棵树都是搜索树")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/20200806190304693.png",alt:"img"}})]),t._v(" "),_("h3",{attrs:{id:"平衡二叉搜索树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉搜索树"}},[t._v("#")]),t._v(" 平衡二叉搜索树")]),t._v(" "),_("p",[t._v("平衡二叉搜索树：又被称为AVL（Adelson-Velsky and Landis）树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。")]),t._v(" "),_("p",[t._v("如图")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/20200806190511967.png",alt:"img"}})]),t._v(" "),_("p",[t._v("最后一棵 不是平衡二叉树，因为它的左右两个子树的高度差的绝对值超过了1。")]),t._v(" "),_("h2",{attrs:{id:"二叉树的存储方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的存储方式"}},[t._v("#")]),t._v(" 二叉树的存储方式")]),t._v(" "),_("p",[_("strong",[t._v("二叉树可以链式存储，也可以顺序存储。")])]),t._v(" "),_("p",[t._v("那么链式存储方式就用指针， 顺序存储的方式就是用数组。")]),t._v(" "),_("p",[t._v("顾名思义就是顺序存储的元素在内存是连续分布的，而链式存储则是通过指针把分布在散落在各个地址的节点串联一起。")]),t._v(" "),_("p",[t._v("链式存储如图：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/image-20220518223318003.png",alt:"image-20220518223318003"}})]),t._v(" "),_("p",[t._v("链式存储是大家很熟悉的一种方式，那么我们来看看如何顺序存储呢？")]),t._v(" "),_("p",[t._v("其实就是用数组来存储二叉树，顺序存储的方式如图：")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/KeXiaoZhan/Images/20200920200429452.png",alt:"img"}})]),t._v(" "),_("p",[t._v("用数组来存储二叉树如何遍历的呢？")]),t._v(" "),_("p",[_("strong",[t._v("如果父节点的数组下标是 i，那么它的左孩子就是 i * 2 + 1，右孩子就是 i * 2 + 2。")])]),t._v(" "),_("p",[t._v("但是用链式表示的二叉树，更有利于我们理解，所以一般我们都是用链式存储二叉树。")]),t._v(" "),_("p",[_("strong",[t._v("所以大家要了解，用数组依然可以表示二叉树。")])]),t._v(" "),_("h2",{attrs:{id:"二叉树的遍历方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的遍历方式"}},[t._v("#")]),t._v(" 二叉树的遍历方式")]),t._v(" "),_("p",[t._v("二叉树主要有两种遍历方式：")]),t._v(" "),_("ol",[_("li",[t._v("深度优先遍历：先往深走，遇到叶子节点再往回走。")]),t._v(" "),_("li",[t._v("广度优先遍历：一层一层的去遍历。")])]),t._v(" "),_("p",[_("strong",[t._v("这两种遍历是图论中最基本的两种遍历方式")]),t._v("，后面在介绍图论的时候 还会介绍到。")]),t._v(" "),_("p",[t._v("那么从深度优先遍历和广度优先遍历进一步拓展，才有如下遍历方式：")]),t._v(" "),_("ul",[_("li",[t._v("深度优先遍历\n"),_("ul",[_("li",[t._v("前序遍历（递归法，迭代法）")]),t._v(" "),_("li",[t._v("中序遍历（递归法，迭代法）")]),t._v(" "),_("li",[t._v("后序遍历（递归法，迭代法）")])])]),t._v(" "),_("li",[t._v("广度优先遍历\n"),_("ul",[_("li",[t._v("层次遍历（迭代法）")])])])]),t._v(" "),_("p",[t._v("我们做二叉树相关题目，经常会使用递归的方式来实现深度优先遍历，也就是实现前中后序遍历，使用递归是比较方便的。")]),t._v(" "),_("p",[t._v("而广度优先遍历的实现一般使用队列来实现，这也是队列先进先出的特点所决定的，因为需要先进先出的结构，才能一层一层的来遍历二叉树。")])])}),[],!1,null,null,null);v.default=s.exports}}]);